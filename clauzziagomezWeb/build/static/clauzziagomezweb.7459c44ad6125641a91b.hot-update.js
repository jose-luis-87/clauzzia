webpackHotUpdate("clauzziagomezweb",{

/***/ "./packages/clauzzia-theme/src/components/Carousel.js":
/*!************************************************************!*\
  !*** ./packages/clauzzia-theme/src/components/Carousel.js ***!
  \************************************************************/
/*! exports provided: H1, HorizontalCenter, Container, Item, Carousel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"H1\", function() { return H1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HorizontalCenter\", function() { return HorizontalCenter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Container\", function() { return Container; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Item\", function() { return Item; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Carousel\", function() { return Carousel; });\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const H1=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"h2\", false?undefined:{target:\"e10yu2e911\",label:\"H1\"})( false?undefined:{name:\"1w9p3rj\",styles:\"text-align:left;margin:0;margin-left:24px;padding-bottom:2rem\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Relative=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e910\",label:\"Relative\"})( false?undefined:{name:\"bjn8wh\",styles:\"position:relative\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Flex=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e99\",label:\"Flex\"})( false?undefined:{name:\"zjik7\",styles:\"display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HorizontalCenter=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(Flex, false?undefined:{target:\"e10yu2e98\",label:\"HorizontalCenter\"})( false?undefined:{name:\"skt3xw\",styles:\"justify-content:center;margin-left:auto;margin-right:auto;max-width:95%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Container=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e97\",label:\"Container\"})( false?undefined:{name:\"1osvr34\",styles:\"height:stretch;width:100%;padding-bottom:2rem;background:transparent\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Item=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e96\",label:\"Item\"})(\"color:white;font-size:1rem;text-transform:capitalize;width:\",({size})=>`${size}rem`,\";height:\",({size})=>`${size/2}rem`,\";display:flex;align-items:center;justify-content:center;position:relative;background-position:center;background-size:cover;background-repeat:no-repeat;>p{position:absolute;bottom:2%;left:0;right:0;text-align:center;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ29kZXNpZ25PbWVuXFxEZXNrdG9wXFxKTFxcV2ViQ2xhdXp6XFxjbGF1enppYWdvbWV6V2ViXFxwYWNrYWdlc1xcY2xhdXp6aWEtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcQ2Fyb3VzZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0M4QiIsImZpbGUiOiJDOlxcVXNlcnNcXENvZGVzaWduT21lblxcRGVza3RvcFxcSkxcXFdlYkNsYXV6elxcY2xhdXp6aWFnb21leldlYlxccGFja2FnZXNcXGNsYXV6emlhLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXENhcm91c2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQge3N0eWxlZCwgY3NzfSBmcm9tICdmcm9udGl0eSdcclxuXHJcbmV4cG9ydCBjb25zdCBIMSA9IHN0eWxlZC5oMmBcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIG1hcmdpbjogMDtcclxuICBtYXJnaW4tbGVmdDogMjRweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMnJlbTtcclxuYFxyXG5cclxuY29uc3QgUmVsYXRpdmUgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuYFxyXG5cclxuY29uc3QgRmxleCA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuYFxyXG5cclxuZXhwb3J0IGNvbnN0IEhvcml6b250YWxDZW50ZXIgPSBzdHlsZWQoRmxleClgXHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG4gIG1heC13aWR0aDogOTUlO1xyXG5gXHJcblxyXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBoZWlnaHQ6IHN0cmV0Y2g7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcGFkZGluZy1ib3R0b206IDJyZW07XHJcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBJdGVtID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG4gIHdpZHRoOiAkeyh7c2l6ZX0pID0+IGAke3NpemV9cmVtYH07XHJcbiAgaGVpZ2h0OiAkeyh7c2l6ZX0pID0+IGAke3NpemUvMn1yZW1gfTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgPnB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDIlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuYFxyXG5cclxuZnVuY3Rpb24gZ2V0UHJldkVsZW1lbnQobGlzdCkge1xyXG4gIGNvbnN0IHNpYmxpbmcgPSBsaXN0WzBdLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcclxuICBcclxuICBpZiAoc2libGluZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gc2libGluZ1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNpYmxpbmdcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TmV4dEVsZW1lbnQobGlzdCkge1xyXG4gIGNvbnN0IHNpYmxpbmcgPSBsaXN0W2xpc3QubGVuZ3RoIC0gMV0ubmV4dEVsZW1lbnRTaWJsaW5nXHJcblxyXG4gIGlmIChzaWJsaW5nIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiBzaWJsaW5nXHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbFxyXG59XHJcblxyXG5mdW5jdGlvbiB1c2VQb3NpdGlvbihyZWYpIHtcclxuICBjb25zdCBbcHJldkVsZW1lbnQsIHNldFByZXZFbGVtZW50XSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXHJcbiAgY29uc3QgW25leHRFbGVtZW50LCBzZXROZXh0RWxlbWVudF0gPSBSZWFjdC51c2VTdGF0ZShudWxsKVxyXG5cclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50XHJcblxyXG4gICAgY29uc3QgdXBkYXRlID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgIFxyXG4gICAgICBjb25zdCB2aXNpYmxlRWxlbWVudHMgPSBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcigoY2hpbGQpID0+IHtcclxuICAgICAgICBjb25zdCBjaGlsZFJlY3QgPSBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICByZXR1cm4gY2hpbGRSZWN0LmxlZnQgPj0gcmVjdC5sZWZ0ICYmIGNoaWxkUmVjdC5yaWdodCA8PSByZWN0LnJpZ2h0XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBpZiAodmlzaWJsZUVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBzZXRQcmV2RWxlbWVudChnZXRQcmV2RWxlbWVudCh2aXNpYmxlRWxlbWVudHMpKVxyXG4gICAgICAgIHNldE5leHRFbGVtZW50KGdldE5leHRFbGVtZW50KHZpc2libGVFbGVtZW50cykpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoKVxyXG5cclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdXBkYXRlLCB7cGFzc2l2ZTogdHJ1ZX0pXHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGUsIHtwYXNzaXZlOiB0cnVlfSlcclxuICAgIH1cclxuICB9LCBbcmVmXSlcclxuXHJcbiAgY29uc3Qgc2Nyb2xsVG9FbGVtZW50ID0gUmVhY3QudXNlQ2FsbGJhY2soXHJcbiAgICAoZWxlbWVudCkgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHJlZi5jdXJyZW50XHJcblxyXG4gICAgICBpZiAoIWN1cnJlbnROb2RlIHx8ICFlbGVtZW50KSByZXR1cm5cclxuXHJcbiAgICAgIGxldCBuZXdTY3JvbGxQb3NpdGlvblxyXG5cclxuICAgICAgbmV3U2Nyb2xsUG9zaXRpb24gPVxyXG4gICAgICAgIGVsZW1lbnQub2Zmc2V0TGVmdCArXHJcbiAgICAgICAgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDIgLVxyXG4gICAgICAgIGN1cnJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC8gMlxyXG5cclxuICAgICAgY3VycmVudE5vZGUuc2Nyb2xsKHtcclxuICAgICAgICBsZWZ0OiBuZXdTY3JvbGxQb3NpdGlvbixcclxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgW3JlZl0sXHJcbiAgKVxyXG5cclxuICBjb25zdCBzY3JvbGxSaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHNjcm9sbFRvRWxlbWVudChuZXh0RWxlbWVudCksIFtcclxuICAgIHNjcm9sbFRvRWxlbWVudCxcclxuICAgIG5leHRFbGVtZW50LFxyXG4gIF0pXHJcblxyXG4gIGNvbnN0IHNjcm9sbExlZnQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBzY3JvbGxUb0VsZW1lbnQocHJldkVsZW1lbnQpLCBbXHJcbiAgICBzY3JvbGxUb0VsZW1lbnQsXHJcbiAgICBwcmV2RWxlbWVudCxcclxuICBdKVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgaGFzSXRlbXNPbkxlZnQ6IHByZXZFbGVtZW50ICE9PSBudWxsLFxyXG4gICAgaGFzSXRlbXNPblJpZ2h0OiBuZXh0RWxlbWVudCAhPT0gbnVsbCxcclxuICAgIHNjcm9sbFJpZ2h0LFxyXG4gICAgc2Nyb2xsTGVmdCxcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IENhcm91c2VyQ29udGFpbmVyID0gc3R5bGVkKFJlbGF0aXZlKWBcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG5gXHJcblxyXG4gY29uc3QgQ2Fyb3VzZWxJdGVtID0gc3R5bGVkLmRpdmBcclxuICBmbGV4OiAwIDAgYXV0bztcclxuXHJcbiAgbWFyZ2luLWxlZnQ6IDFyZW07XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG5cclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gIHRvcDogNTAlO1xyXG4gIHotaW5kZXg6IDE7XHJcblxyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O1xyXG5cclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBwYWRkaW5nOiAwLjVyZW07XHJcbmBcclxuIGNvbnN0IExlZnRDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZChDYXJvdXNlbEJ1dHRvbilgXHJcbiAgbGVmdDogMDtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAwJSwgLTUwJSk7XHJcblxyXG4gICR7Q2Fyb3VzZXJDb250YWluZXJ9OmhvdmVyICYge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01MCUpO1xyXG4gIH1cclxuXHJcbiAgdmlzaWJpbGl0eTogJHsoe2hhc0l0ZW1zT25MZWZ0fSkgPT4gKGhhc0l0ZW1zT25MZWZ0ID8gYGFsbGAgOiBgaGlkZGVuYCl9O1xyXG5gXHJcblxyXG4gY29uc3QgUmlnaHRDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZChDYXJvdXNlbEJ1dHRvbilgXHJcbiAgcmlnaHQ6IDA7XHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwJSwgLTUwJSk7XHJcblxyXG4gICR7Q2Fyb3VzZXJDb250YWluZXJ9OmhvdmVyICYge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01MCUpO1xyXG4gIH1cclxuXHJcbiAgdmlzaWJpbGl0eTogJHsoe2hhc0l0ZW1zT25SaWdodH0pID0+IChoYXNJdGVtc09uUmlnaHQgPyBgYWxsYCA6IGBoaWRkZW5gKX07XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlckNvbnRhaW5lcklubmVyID0gc3R5bGVkKEZsZXgpYFxyXG4gIG92ZXJmbG93LXg6IHNjcm9sbDtcclxuICBzY3JvbGwtc25hcC10eXBlOiB4IG1hbmRhdG9yeTtcclxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XHJcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xyXG5cclxuICAvLyBvZmZzZXQgZm9yIGNoaWxkcmVuIHNwYWNpbmdcclxuICBtYXJnaW4tbGVmdDogLTFyZW07XHJcblxyXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG5cclxuICAke0Nhcm91c2VsSXRlbX0gJiB7XHJcbiAgICBzY3JvbGwtc25hcC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuYFxyXG5cclxuY29uc3QgQXJyb3dMZWZ0ID0gKHtzaXplID0gMzAsIGNvbG9yID0gJyMwMDAwMDAnfSkgPT4gKFxyXG4gIDxzdmdcclxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgd2lkdGg9e3NpemV9XHJcbiAgICBoZWlnaHQ9e3NpemV9XHJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgIGZpbGw9XCJub25lXCJcclxuICAgIHN0cm9rZT17Y29sb3J9XHJcbiAgICBzdHJva2VXaWR0aD1cIjJcIlxyXG4gICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcclxuICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNMTkgMTJINk0xMiA1bC03IDcgNyA3XCIgLz5cclxuICA8L3N2Zz5cclxuKVxyXG5cclxuXHJcbmNvbnN0IEFycm93UmlnaHQgPSAoe3NpemUgPSAzMCwgY29sb3IgPSAnIzAwMDAwMCd9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICB3aWR0aD17c2l6ZX1cclxuICAgIGhlaWdodD17c2l6ZX1cclxuICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgc3Ryb2tlPXtjb2xvcn1cclxuICAgIHN0cm9rZVdpZHRoPVwiMlwiXHJcbiAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxyXG4gICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXHJcbiAgPlxyXG4gICAgPHBhdGggZD1cIk01IDEyaDEzTTEyIDVsNyA3LTcgN1wiIC8+XHJcbiAgPC9zdmc+XHJcbilcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ2Fyb3VzZWwoe2NoaWxkcmVufSkge1xyXG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZigpXHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGhhc0l0ZW1zT25MZWZ0LFxyXG4gICAgaGFzSXRlbXNPblJpZ2h0LFxyXG4gICAgc2Nyb2xsUmlnaHQsXHJcbiAgICBzY3JvbGxMZWZ0LFxyXG4gIH0gPSB1c2VQb3NpdGlvbihyZWYpXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q2Fyb3VzZXJDb250YWluZXIgcm9sZT1cInJlZ2lvblwiIGFyaWEtbGFiZWw9XCJDb2xvcnMgY2Fyb3VzZWxcIj5cclxuICAgICAgPENhcm91c2VyQ29udGFpbmVySW5uZXIgcmVmPXtyZWZ9PlxyXG4gICAgICAgIHtSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IChcclxuICAgICAgICAgIDxDYXJvdXNlbEl0ZW0ga2V5PXtpbmRleH0+e2NoaWxkfTwvQ2Fyb3VzZWxJdGVtPlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L0Nhcm91c2VyQ29udGFpbmVySW5uZXI+XHJcbiAgICAgIDxMZWZ0Q2Fyb3VzZWxCdXR0b24gaGFzSXRlbXNPbkxlZnQ9e2hhc0l0ZW1zT25MZWZ0fSBvbkNsaWNrPXtzY3JvbGxMZWZ0fSBhcmlhLWxhYmVsPSdQcmV2aW91cyBzbGlkZSc+XHJcbiAgICAgICAgPEFycm93TGVmdCAvPlxyXG4gICAgICA8L0xlZnRDYXJvdXNlbEJ1dHRvbj5cclxuICAgICAgPFJpZ2h0Q2Fyb3VzZWxCdXR0b25cclxuICAgICAgICBoYXNJdGVtc09uUmlnaHQ9e2hhc0l0ZW1zT25SaWdodH1cclxuICAgICAgICBvbkNsaWNrPXtzY3JvbGxSaWdodH1cclxuICAgICAgICBhcmlhLWxhYmVsPSdOZXh0IHNsaWRlJ1xyXG4gICAgICA+XHJcbiAgICAgICAgPEFycm93UmlnaHQgLz5cclxuICAgICAgPC9SaWdodENhcm91c2VsQnV0dG9uPlxyXG4gICAgPC9DYXJvdXNlckNvbnRhaW5lcj5cclxuICApXHJcbn0iXX0= */\"));function getPrevElement(list){const sibling=list[0].previousElementSibling;if(sibling instanceof HTMLElement){return sibling;}return sibling;}function getNextElement(list){const sibling=list[list.length-1].nextElementSibling;if(sibling instanceof HTMLElement){return sibling;}return null;}function usePosition(ref){const[prevElement,setPrevElement]=react__WEBPACK_IMPORTED_MODULE_2___default.a.useState(null);const[nextElement,setNextElement]=react__WEBPACK_IMPORTED_MODULE_2___default.a.useState(null);react__WEBPACK_IMPORTED_MODULE_2___default.a.useEffect(()=>{const element=ref.current;const update=()=>{const rect=element.getBoundingClientRect();const visibleElements=Array.from(element.children).filter(child=>{const childRect=child.getBoundingClientRect();return childRect.left>=rect.left&&childRect.right<=rect.right;});if(visibleElements.length>0){setPrevElement(getPrevElement(visibleElements));setNextElement(getNextElement(visibleElements));}};update();element.addEventListener('scroll',update,{passive:true});return()=>{element.removeEventListener('scroll',update,{passive:true});};},[ref]);const scrollToElement=react__WEBPACK_IMPORTED_MODULE_2___default.a.useCallback(element=>{const currentNode=ref.current;if(!currentNode||!element)return;let newScrollPosition;newScrollPosition=element.offsetLeft+element.getBoundingClientRect().width/2-currentNode.getBoundingClientRect().width/2;currentNode.scroll({left:newScrollPosition,behavior:'smooth'});},[ref]);const scrollRight=react__WEBPACK_IMPORTED_MODULE_2___default.a.useCallback(()=>scrollToElement(nextElement),[scrollToElement,nextElement]);const scrollLeft=react__WEBPACK_IMPORTED_MODULE_2___default.a.useCallback(()=>scrollToElement(prevElement),[scrollToElement,prevElement]);return{hasItemsOnLeft:prevElement!==null,hasItemsOnRight:nextElement!==null,scrollRight,scrollLeft};}const CarouserContainer=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(Relative, false?undefined:{target:\"e10yu2e95\",label:\"CarouserContainer\"})( false?undefined:{name:\"d3v9zr\",styles:\"overflow:hidden\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CarouselItem=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e94\",label:\"CarouselItem\"})( false?undefined:{name:\"1jvczce\",styles:\"flex:0 0 auto;margin-left:1rem\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CarouselButton=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"button\", false?undefined:{target:\"e10yu2e93\",label:\"CarouselButton\"})( false?undefined:{name:\"z3ta42\",styles:\"position:absolute;cursor:pointer;top:50%;z-index:1;transition:transform 0.1s ease-in-out;background:white;border-radius:15px;border:none;padding:0.5rem\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ29kZXNpZ25PbWVuXFxEZXNrdG9wXFxKTFxcV2ViQ2xhdXp6XFxjbGF1enppYWdvbWV6V2ViXFxwYWNrYWdlc1xcY2xhdXp6aWEtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcQ2Fyb3VzZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkpxQyIsImZpbGUiOiJDOlxcVXNlcnNcXENvZGVzaWduT21lblxcRGVza3RvcFxcSkxcXFdlYkNsYXV6elxcY2xhdXp6aWFnb21leldlYlxccGFja2FnZXNcXGNsYXV6emlhLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXENhcm91c2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQge3N0eWxlZCwgY3NzfSBmcm9tICdmcm9udGl0eSdcclxuXHJcbmV4cG9ydCBjb25zdCBIMSA9IHN0eWxlZC5oMmBcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIG1hcmdpbjogMDtcclxuICBtYXJnaW4tbGVmdDogMjRweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMnJlbTtcclxuYFxyXG5cclxuY29uc3QgUmVsYXRpdmUgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuYFxyXG5cclxuY29uc3QgRmxleCA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuYFxyXG5cclxuZXhwb3J0IGNvbnN0IEhvcml6b250YWxDZW50ZXIgPSBzdHlsZWQoRmxleClgXHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG4gIG1heC13aWR0aDogOTUlO1xyXG5gXHJcblxyXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBoZWlnaHQ6IHN0cmV0Y2g7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcGFkZGluZy1ib3R0b206IDJyZW07XHJcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBJdGVtID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG4gIHdpZHRoOiAkeyh7c2l6ZX0pID0+IGAke3NpemV9cmVtYH07XHJcbiAgaGVpZ2h0OiAkeyh7c2l6ZX0pID0+IGAke3NpemUvMn1yZW1gfTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgPnB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDIlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuYFxyXG5cclxuZnVuY3Rpb24gZ2V0UHJldkVsZW1lbnQobGlzdCkge1xyXG4gIGNvbnN0IHNpYmxpbmcgPSBsaXN0WzBdLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcclxuICBcclxuICBpZiAoc2libGluZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gc2libGluZ1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNpYmxpbmdcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TmV4dEVsZW1lbnQobGlzdCkge1xyXG4gIGNvbnN0IHNpYmxpbmcgPSBsaXN0W2xpc3QubGVuZ3RoIC0gMV0ubmV4dEVsZW1lbnRTaWJsaW5nXHJcblxyXG4gIGlmIChzaWJsaW5nIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiBzaWJsaW5nXHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbFxyXG59XHJcblxyXG5mdW5jdGlvbiB1c2VQb3NpdGlvbihyZWYpIHtcclxuICBjb25zdCBbcHJldkVsZW1lbnQsIHNldFByZXZFbGVtZW50XSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXHJcbiAgY29uc3QgW25leHRFbGVtZW50LCBzZXROZXh0RWxlbWVudF0gPSBSZWFjdC51c2VTdGF0ZShudWxsKVxyXG5cclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50XHJcblxyXG4gICAgY29uc3QgdXBkYXRlID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgIFxyXG4gICAgICBjb25zdCB2aXNpYmxlRWxlbWVudHMgPSBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcigoY2hpbGQpID0+IHtcclxuICAgICAgICBjb25zdCBjaGlsZFJlY3QgPSBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICByZXR1cm4gY2hpbGRSZWN0LmxlZnQgPj0gcmVjdC5sZWZ0ICYmIGNoaWxkUmVjdC5yaWdodCA8PSByZWN0LnJpZ2h0XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBpZiAodmlzaWJsZUVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBzZXRQcmV2RWxlbWVudChnZXRQcmV2RWxlbWVudCh2aXNpYmxlRWxlbWVudHMpKVxyXG4gICAgICAgIHNldE5leHRFbGVtZW50KGdldE5leHRFbGVtZW50KHZpc2libGVFbGVtZW50cykpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoKVxyXG5cclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdXBkYXRlLCB7cGFzc2l2ZTogdHJ1ZX0pXHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGUsIHtwYXNzaXZlOiB0cnVlfSlcclxuICAgIH1cclxuICB9LCBbcmVmXSlcclxuXHJcbiAgY29uc3Qgc2Nyb2xsVG9FbGVtZW50ID0gUmVhY3QudXNlQ2FsbGJhY2soXHJcbiAgICAoZWxlbWVudCkgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHJlZi5jdXJyZW50XHJcblxyXG4gICAgICBpZiAoIWN1cnJlbnROb2RlIHx8ICFlbGVtZW50KSByZXR1cm5cclxuXHJcbiAgICAgIGxldCBuZXdTY3JvbGxQb3NpdGlvblxyXG5cclxuICAgICAgbmV3U2Nyb2xsUG9zaXRpb24gPVxyXG4gICAgICAgIGVsZW1lbnQub2Zmc2V0TGVmdCArXHJcbiAgICAgICAgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDIgLVxyXG4gICAgICAgIGN1cnJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC8gMlxyXG5cclxuICAgICAgY3VycmVudE5vZGUuc2Nyb2xsKHtcclxuICAgICAgICBsZWZ0OiBuZXdTY3JvbGxQb3NpdGlvbixcclxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgW3JlZl0sXHJcbiAgKVxyXG5cclxuICBjb25zdCBzY3JvbGxSaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHNjcm9sbFRvRWxlbWVudChuZXh0RWxlbWVudCksIFtcclxuICAgIHNjcm9sbFRvRWxlbWVudCxcclxuICAgIG5leHRFbGVtZW50LFxyXG4gIF0pXHJcblxyXG4gIGNvbnN0IHNjcm9sbExlZnQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBzY3JvbGxUb0VsZW1lbnQocHJldkVsZW1lbnQpLCBbXHJcbiAgICBzY3JvbGxUb0VsZW1lbnQsXHJcbiAgICBwcmV2RWxlbWVudCxcclxuICBdKVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgaGFzSXRlbXNPbkxlZnQ6IHByZXZFbGVtZW50ICE9PSBudWxsLFxyXG4gICAgaGFzSXRlbXNPblJpZ2h0OiBuZXh0RWxlbWVudCAhPT0gbnVsbCxcclxuICAgIHNjcm9sbFJpZ2h0LFxyXG4gICAgc2Nyb2xsTGVmdCxcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IENhcm91c2VyQ29udGFpbmVyID0gc3R5bGVkKFJlbGF0aXZlKWBcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG5gXHJcblxyXG4gY29uc3QgQ2Fyb3VzZWxJdGVtID0gc3R5bGVkLmRpdmBcclxuICBmbGV4OiAwIDAgYXV0bztcclxuXHJcbiAgbWFyZ2luLWxlZnQ6IDFyZW07XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG5cclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gIHRvcDogNTAlO1xyXG4gIHotaW5kZXg6IDE7XHJcblxyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O1xyXG5cclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBwYWRkaW5nOiAwLjVyZW07XHJcbmBcclxuIGNvbnN0IExlZnRDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZChDYXJvdXNlbEJ1dHRvbilgXHJcbiAgbGVmdDogMDtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAwJSwgLTUwJSk7XHJcblxyXG4gICR7Q2Fyb3VzZXJDb250YWluZXJ9OmhvdmVyICYge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01MCUpO1xyXG4gIH1cclxuXHJcbiAgdmlzaWJpbGl0eTogJHsoe2hhc0l0ZW1zT25MZWZ0fSkgPT4gKGhhc0l0ZW1zT25MZWZ0ID8gYGFsbGAgOiBgaGlkZGVuYCl9O1xyXG5gXHJcblxyXG4gY29uc3QgUmlnaHRDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZChDYXJvdXNlbEJ1dHRvbilgXHJcbiAgcmlnaHQ6IDA7XHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwJSwgLTUwJSk7XHJcblxyXG4gICR7Q2Fyb3VzZXJDb250YWluZXJ9OmhvdmVyICYge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01MCUpO1xyXG4gIH1cclxuXHJcbiAgdmlzaWJpbGl0eTogJHsoe2hhc0l0ZW1zT25SaWdodH0pID0+IChoYXNJdGVtc09uUmlnaHQgPyBgYWxsYCA6IGBoaWRkZW5gKX07XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlckNvbnRhaW5lcklubmVyID0gc3R5bGVkKEZsZXgpYFxyXG4gIG92ZXJmbG93LXg6IHNjcm9sbDtcclxuICBzY3JvbGwtc25hcC10eXBlOiB4IG1hbmRhdG9yeTtcclxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XHJcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xyXG5cclxuICAvLyBvZmZzZXQgZm9yIGNoaWxkcmVuIHNwYWNpbmdcclxuICBtYXJnaW4tbGVmdDogLTFyZW07XHJcblxyXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG5cclxuICAke0Nhcm91c2VsSXRlbX0gJiB7XHJcbiAgICBzY3JvbGwtc25hcC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuYFxyXG5cclxuY29uc3QgQXJyb3dMZWZ0ID0gKHtzaXplID0gMzAsIGNvbG9yID0gJyMwMDAwMDAnfSkgPT4gKFxyXG4gIDxzdmdcclxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgd2lkdGg9e3NpemV9XHJcbiAgICBoZWlnaHQ9e3NpemV9XHJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgIGZpbGw9XCJub25lXCJcclxuICAgIHN0cm9rZT17Y29sb3J9XHJcbiAgICBzdHJva2VXaWR0aD1cIjJcIlxyXG4gICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcclxuICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNMTkgMTJINk0xMiA1bC03IDcgNyA3XCIgLz5cclxuICA8L3N2Zz5cclxuKVxyXG5cclxuXHJcbmNvbnN0IEFycm93UmlnaHQgPSAoe3NpemUgPSAzMCwgY29sb3IgPSAnIzAwMDAwMCd9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICB3aWR0aD17c2l6ZX1cclxuICAgIGhlaWdodD17c2l6ZX1cclxuICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgc3Ryb2tlPXtjb2xvcn1cclxuICAgIHN0cm9rZVdpZHRoPVwiMlwiXHJcbiAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxyXG4gICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXHJcbiAgPlxyXG4gICAgPHBhdGggZD1cIk01IDEyaDEzTTEyIDVsNyA3LTcgN1wiIC8+XHJcbiAgPC9zdmc+XHJcbilcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ2Fyb3VzZWwoe2NoaWxkcmVufSkge1xyXG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZigpXHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGhhc0l0ZW1zT25MZWZ0LFxyXG4gICAgaGFzSXRlbXNPblJpZ2h0LFxyXG4gICAgc2Nyb2xsUmlnaHQsXHJcbiAgICBzY3JvbGxMZWZ0LFxyXG4gIH0gPSB1c2VQb3NpdGlvbihyZWYpXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q2Fyb3VzZXJDb250YWluZXIgcm9sZT1cInJlZ2lvblwiIGFyaWEtbGFiZWw9XCJDb2xvcnMgY2Fyb3VzZWxcIj5cclxuICAgICAgPENhcm91c2VyQ29udGFpbmVySW5uZXIgcmVmPXtyZWZ9PlxyXG4gICAgICAgIHtSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IChcclxuICAgICAgICAgIDxDYXJvdXNlbEl0ZW0ga2V5PXtpbmRleH0+e2NoaWxkfTwvQ2Fyb3VzZWxJdGVtPlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L0Nhcm91c2VyQ29udGFpbmVySW5uZXI+XHJcbiAgICAgIDxMZWZ0Q2Fyb3VzZWxCdXR0b24gaGFzSXRlbXNPbkxlZnQ9e2hhc0l0ZW1zT25MZWZ0fSBvbkNsaWNrPXtzY3JvbGxMZWZ0fSBhcmlhLWxhYmVsPSdQcmV2aW91cyBzbGlkZSc+XHJcbiAgICAgICAgPEFycm93TGVmdCAvPlxyXG4gICAgICA8L0xlZnRDYXJvdXNlbEJ1dHRvbj5cclxuICAgICAgPFJpZ2h0Q2Fyb3VzZWxCdXR0b25cclxuICAgICAgICBoYXNJdGVtc09uUmlnaHQ9e2hhc0l0ZW1zT25SaWdodH1cclxuICAgICAgICBvbkNsaWNrPXtzY3JvbGxSaWdodH1cclxuICAgICAgICBhcmlhLWxhYmVsPSdOZXh0IHNsaWRlJ1xyXG4gICAgICA+XHJcbiAgICAgICAgPEFycm93UmlnaHQgLz5cclxuICAgICAgPC9SaWdodENhcm91c2VsQnV0dG9uPlxyXG4gICAgPC9DYXJvdXNlckNvbnRhaW5lcj5cclxuICApXHJcbn0iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const LeftCarouselButton=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(CarouselButton, false?undefined:{target:\"e10yu2e92\",label:\"LeftCarouselButton\"})(\"left:0;transform:translate(-100%, -50%);\",CarouserContainer,\":hover &{transform:translate(0%, -50%);}visibility:\",({hasItemsOnLeft})=>hasItemsOnLeft?`all`:`hidden`,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const RightCarouselButton=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(CarouselButton, false?undefined:{target:\"e10yu2e91\",label:\"RightCarouselButton\"})(\"right:0;transform:translate(100%, -50%);\",CarouserContainer,\":hover &{transform:translate(0%, -50%);}visibility:\",({hasItemsOnRight})=>hasItemsOnRight?`all`:`hidden`,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const CarouserContainerInner=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(Flex, false?undefined:{target:\"e10yu2e90\",label:\"CarouserContainerInner\"})(\"overflow-x:scroll;scroll-snap-type:x mandatory;-ms-overflow-style:none;scrollbar-width:none;margin-left:-1rem;&::-webkit-scrollbar{display:none;}\",CarouselItem,\" &{scroll-snap-align:center;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ29kZXNpZ25PbWVuXFxEZXNrdG9wXFxKTFxcV2ViQ2xhdXp6XFxjbGF1enppYWdvbWV6V2ViXFxwYWNrYWdlc1xcY2xhdXp6aWEtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcQ2Fyb3VzZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ000QyIsImZpbGUiOiJDOlxcVXNlcnNcXENvZGVzaWduT21lblxcRGVza3RvcFxcSkxcXFdlYkNsYXV6elxcY2xhdXp6aWFnb21leldlYlxccGFja2FnZXNcXGNsYXV6emlhLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXENhcm91c2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQge3N0eWxlZCwgY3NzfSBmcm9tICdmcm9udGl0eSdcclxuXHJcbmV4cG9ydCBjb25zdCBIMSA9IHN0eWxlZC5oMmBcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIG1hcmdpbjogMDtcclxuICBtYXJnaW4tbGVmdDogMjRweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMnJlbTtcclxuYFxyXG5cclxuY29uc3QgUmVsYXRpdmUgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuYFxyXG5cclxuY29uc3QgRmxleCA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuYFxyXG5cclxuZXhwb3J0IGNvbnN0IEhvcml6b250YWxDZW50ZXIgPSBzdHlsZWQoRmxleClgXHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG4gIG1heC13aWR0aDogOTUlO1xyXG5gXHJcblxyXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBoZWlnaHQ6IHN0cmV0Y2g7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcGFkZGluZy1ib3R0b206IDJyZW07XHJcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBJdGVtID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG4gIHdpZHRoOiAkeyh7c2l6ZX0pID0+IGAke3NpemV9cmVtYH07XHJcbiAgaGVpZ2h0OiAkeyh7c2l6ZX0pID0+IGAke3NpemUvMn1yZW1gfTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgPnB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDIlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuYFxyXG5cclxuZnVuY3Rpb24gZ2V0UHJldkVsZW1lbnQobGlzdCkge1xyXG4gIGNvbnN0IHNpYmxpbmcgPSBsaXN0WzBdLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcclxuICBcclxuICBpZiAoc2libGluZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gc2libGluZ1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNpYmxpbmdcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TmV4dEVsZW1lbnQobGlzdCkge1xyXG4gIGNvbnN0IHNpYmxpbmcgPSBsaXN0W2xpc3QubGVuZ3RoIC0gMV0ubmV4dEVsZW1lbnRTaWJsaW5nXHJcblxyXG4gIGlmIChzaWJsaW5nIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiBzaWJsaW5nXHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbFxyXG59XHJcblxyXG5mdW5jdGlvbiB1c2VQb3NpdGlvbihyZWYpIHtcclxuICBjb25zdCBbcHJldkVsZW1lbnQsIHNldFByZXZFbGVtZW50XSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXHJcbiAgY29uc3QgW25leHRFbGVtZW50LCBzZXROZXh0RWxlbWVudF0gPSBSZWFjdC51c2VTdGF0ZShudWxsKVxyXG5cclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50XHJcblxyXG4gICAgY29uc3QgdXBkYXRlID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgIFxyXG4gICAgICBjb25zdCB2aXNpYmxlRWxlbWVudHMgPSBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcigoY2hpbGQpID0+IHtcclxuICAgICAgICBjb25zdCBjaGlsZFJlY3QgPSBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICByZXR1cm4gY2hpbGRSZWN0LmxlZnQgPj0gcmVjdC5sZWZ0ICYmIGNoaWxkUmVjdC5yaWdodCA8PSByZWN0LnJpZ2h0XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBpZiAodmlzaWJsZUVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBzZXRQcmV2RWxlbWVudChnZXRQcmV2RWxlbWVudCh2aXNpYmxlRWxlbWVudHMpKVxyXG4gICAgICAgIHNldE5leHRFbGVtZW50KGdldE5leHRFbGVtZW50KHZpc2libGVFbGVtZW50cykpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoKVxyXG5cclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdXBkYXRlLCB7cGFzc2l2ZTogdHJ1ZX0pXHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGUsIHtwYXNzaXZlOiB0cnVlfSlcclxuICAgIH1cclxuICB9LCBbcmVmXSlcclxuXHJcbiAgY29uc3Qgc2Nyb2xsVG9FbGVtZW50ID0gUmVhY3QudXNlQ2FsbGJhY2soXHJcbiAgICAoZWxlbWVudCkgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHJlZi5jdXJyZW50XHJcblxyXG4gICAgICBpZiAoIWN1cnJlbnROb2RlIHx8ICFlbGVtZW50KSByZXR1cm5cclxuXHJcbiAgICAgIGxldCBuZXdTY3JvbGxQb3NpdGlvblxyXG5cclxuICAgICAgbmV3U2Nyb2xsUG9zaXRpb24gPVxyXG4gICAgICAgIGVsZW1lbnQub2Zmc2V0TGVmdCArXHJcbiAgICAgICAgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDIgLVxyXG4gICAgICAgIGN1cnJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC8gMlxyXG5cclxuICAgICAgY3VycmVudE5vZGUuc2Nyb2xsKHtcclxuICAgICAgICBsZWZ0OiBuZXdTY3JvbGxQb3NpdGlvbixcclxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgW3JlZl0sXHJcbiAgKVxyXG5cclxuICBjb25zdCBzY3JvbGxSaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHNjcm9sbFRvRWxlbWVudChuZXh0RWxlbWVudCksIFtcclxuICAgIHNjcm9sbFRvRWxlbWVudCxcclxuICAgIG5leHRFbGVtZW50LFxyXG4gIF0pXHJcblxyXG4gIGNvbnN0IHNjcm9sbExlZnQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBzY3JvbGxUb0VsZW1lbnQocHJldkVsZW1lbnQpLCBbXHJcbiAgICBzY3JvbGxUb0VsZW1lbnQsXHJcbiAgICBwcmV2RWxlbWVudCxcclxuICBdKVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgaGFzSXRlbXNPbkxlZnQ6IHByZXZFbGVtZW50ICE9PSBudWxsLFxyXG4gICAgaGFzSXRlbXNPblJpZ2h0OiBuZXh0RWxlbWVudCAhPT0gbnVsbCxcclxuICAgIHNjcm9sbFJpZ2h0LFxyXG4gICAgc2Nyb2xsTGVmdCxcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IENhcm91c2VyQ29udGFpbmVyID0gc3R5bGVkKFJlbGF0aXZlKWBcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG5gXHJcblxyXG4gY29uc3QgQ2Fyb3VzZWxJdGVtID0gc3R5bGVkLmRpdmBcclxuICBmbGV4OiAwIDAgYXV0bztcclxuXHJcbiAgbWFyZ2luLWxlZnQ6IDFyZW07XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG5cclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gIHRvcDogNTAlO1xyXG4gIHotaW5kZXg6IDE7XHJcblxyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O1xyXG5cclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBwYWRkaW5nOiAwLjVyZW07XHJcbmBcclxuIGNvbnN0IExlZnRDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZChDYXJvdXNlbEJ1dHRvbilgXHJcbiAgbGVmdDogMDtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAwJSwgLTUwJSk7XHJcblxyXG4gICR7Q2Fyb3VzZXJDb250YWluZXJ9OmhvdmVyICYge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01MCUpO1xyXG4gIH1cclxuXHJcbiAgdmlzaWJpbGl0eTogJHsoe2hhc0l0ZW1zT25MZWZ0fSkgPT4gKGhhc0l0ZW1zT25MZWZ0ID8gYGFsbGAgOiBgaGlkZGVuYCl9O1xyXG5gXHJcblxyXG4gY29uc3QgUmlnaHRDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZChDYXJvdXNlbEJ1dHRvbilgXHJcbiAgcmlnaHQ6IDA7XHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwJSwgLTUwJSk7XHJcblxyXG4gICR7Q2Fyb3VzZXJDb250YWluZXJ9OmhvdmVyICYge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01MCUpO1xyXG4gIH1cclxuXHJcbiAgdmlzaWJpbGl0eTogJHsoe2hhc0l0ZW1zT25SaWdodH0pID0+IChoYXNJdGVtc09uUmlnaHQgPyBgYWxsYCA6IGBoaWRkZW5gKX07XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlckNvbnRhaW5lcklubmVyID0gc3R5bGVkKEZsZXgpYFxyXG4gIG92ZXJmbG93LXg6IHNjcm9sbDtcclxuICBzY3JvbGwtc25hcC10eXBlOiB4IG1hbmRhdG9yeTtcclxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XHJcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xyXG5cclxuICAvLyBvZmZzZXQgZm9yIGNoaWxkcmVuIHNwYWNpbmdcclxuICBtYXJnaW4tbGVmdDogLTFyZW07XHJcblxyXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG5cclxuICAke0Nhcm91c2VsSXRlbX0gJiB7XHJcbiAgICBzY3JvbGwtc25hcC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuYFxyXG5cclxuY29uc3QgQXJyb3dMZWZ0ID0gKHtzaXplID0gMzAsIGNvbG9yID0gJyMwMDAwMDAnfSkgPT4gKFxyXG4gIDxzdmdcclxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgd2lkdGg9e3NpemV9XHJcbiAgICBoZWlnaHQ9e3NpemV9XHJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgIGZpbGw9XCJub25lXCJcclxuICAgIHN0cm9rZT17Y29sb3J9XHJcbiAgICBzdHJva2VXaWR0aD1cIjJcIlxyXG4gICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcclxuICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNMTkgMTJINk0xMiA1bC03IDcgNyA3XCIgLz5cclxuICA8L3N2Zz5cclxuKVxyXG5cclxuXHJcbmNvbnN0IEFycm93UmlnaHQgPSAoe3NpemUgPSAzMCwgY29sb3IgPSAnIzAwMDAwMCd9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICB3aWR0aD17c2l6ZX1cclxuICAgIGhlaWdodD17c2l6ZX1cclxuICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgc3Ryb2tlPXtjb2xvcn1cclxuICAgIHN0cm9rZVdpZHRoPVwiMlwiXHJcbiAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxyXG4gICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXHJcbiAgPlxyXG4gICAgPHBhdGggZD1cIk01IDEyaDEzTTEyIDVsNyA3LTcgN1wiIC8+XHJcbiAgPC9zdmc+XHJcbilcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ2Fyb3VzZWwoe2NoaWxkcmVufSkge1xyXG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZigpXHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGhhc0l0ZW1zT25MZWZ0LFxyXG4gICAgaGFzSXRlbXNPblJpZ2h0LFxyXG4gICAgc2Nyb2xsUmlnaHQsXHJcbiAgICBzY3JvbGxMZWZ0LFxyXG4gIH0gPSB1c2VQb3NpdGlvbihyZWYpXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q2Fyb3VzZXJDb250YWluZXIgcm9sZT1cInJlZ2lvblwiIGFyaWEtbGFiZWw9XCJDb2xvcnMgY2Fyb3VzZWxcIj5cclxuICAgICAgPENhcm91c2VyQ29udGFpbmVySW5uZXIgcmVmPXtyZWZ9PlxyXG4gICAgICAgIHtSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IChcclxuICAgICAgICAgIDxDYXJvdXNlbEl0ZW0ga2V5PXtpbmRleH0+e2NoaWxkfTwvQ2Fyb3VzZWxJdGVtPlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L0Nhcm91c2VyQ29udGFpbmVySW5uZXI+XHJcbiAgICAgIDxMZWZ0Q2Fyb3VzZWxCdXR0b24gaGFzSXRlbXNPbkxlZnQ9e2hhc0l0ZW1zT25MZWZ0fSBvbkNsaWNrPXtzY3JvbGxMZWZ0fSBhcmlhLWxhYmVsPSdQcmV2aW91cyBzbGlkZSc+XHJcbiAgICAgICAgPEFycm93TGVmdCAvPlxyXG4gICAgICA8L0xlZnRDYXJvdXNlbEJ1dHRvbj5cclxuICAgICAgPFJpZ2h0Q2Fyb3VzZWxCdXR0b25cclxuICAgICAgICBoYXNJdGVtc09uUmlnaHQ9e2hhc0l0ZW1zT25SaWdodH1cclxuICAgICAgICBvbkNsaWNrPXtzY3JvbGxSaWdodH1cclxuICAgICAgICBhcmlhLWxhYmVsPSdOZXh0IHNsaWRlJ1xyXG4gICAgICA+XHJcbiAgICAgICAgPEFycm93UmlnaHQgLz5cclxuICAgICAgPC9SaWdodENhcm91c2VsQnV0dG9uPlxyXG4gICAgPC9DYXJvdXNlckNvbnRhaW5lcj5cclxuICApXHJcbn0iXX0= */\"));const ArrowLeft=({size:_size=30,color:_color='#000000'})=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:_size,height:_size,viewBox:\"0 0 24 24\",fill:\"none\",stroke:_color,strokeWidth:\"2\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"path\",{d:\"M19 12H6M12 5l-7 7 7 7\"})});const ArrowRight=({size:_size2=30,color:_color2='#000000'})=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:_size2,height:_size2,viewBox:\"0 0 24 24\",fill:\"none\",stroke:_color2,strokeWidth:\"2\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"path\",{d:\"M5 12h13M12 5l7 7-7 7\"})});function Carousel({children}){const ref=react__WEBPACK_IMPORTED_MODULE_2___default.a.useRef();const{hasItemsOnLeft,hasItemsOnRight,scrollRight,scrollLeft}=usePosition(ref);return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsxs\"])(CarouserContainer,{role:\"region\",\"aria-label\":\"Colors carousel\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(CarouserContainerInner,{ref:ref,children:react__WEBPACK_IMPORTED_MODULE_2___default.a.Children.map(children,(child,index)=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(CarouselItem,{children:child},index))}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(LeftCarouselButton,{hasItemsOnLeft:hasItemsOnLeft,onClick:scrollLeft,\"aria-label\":\"Previous slide\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(ArrowLeft,{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(RightCarouselButton,{hasItemsOnRight:hasItemsOnRight,onClick:scrollRight,\"aria-label\":\"Next slide\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(ArrowRight,{})})]});}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/clauzzia-theme/src/components/Carousel.js\n");

/***/ })

})