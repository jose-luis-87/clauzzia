webpackHotUpdate("clauzziagomezweb",{

/***/ "./packages/clauzzia-theme/src/components/Carousel.js":
/*!************************************************************!*\
  !*** ./packages/clauzzia-theme/src/components/Carousel.js ***!
  \************************************************************/
/*! exports provided: H1, HorizontalCenter, Container, Carousel, colors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"H1\", function() { return H1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HorizontalCenter\", function() { return HorizontalCenter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Container\", function() { return Container; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Carousel\", function() { return Carousel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"colors\", function() { return colors; });\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const H1=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"h1\", false?undefined:{target:\"e10yu2e911\",label:\"H1\"})( false?undefined:{name:\"1n89zzn\",styles:\"text-align:center;margin:0;padding-bottom:10rem\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Relative=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e910\",label:\"Relative\"})( false?undefined:{name:\"bjn8wh\",styles:\"position:relative\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ29kZXNpZ25PbWVuXFxEZXNrdG9wXFxKTFxcV2ViQ2xhdXp6XFxjbGF1enppYWdvbWV6V2ViXFxwYWNrYWdlc1xcY2xhdXp6aWEtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcQ2Fyb3VzZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUTJCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcQ29kZXNpZ25PbWVuXFxEZXNrdG9wXFxKTFxcV2ViQ2xhdXp6XFxjbGF1enppYWdvbWV6V2ViXFxwYWNrYWdlc1xcY2xhdXp6aWEtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcQ2Fyb3VzZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N0eWxlZCwgY3NzfSBmcm9tICdmcm9udGl0eSdcclxuXHJcbmV4cG9ydCBjb25zdCBIMSA9IHN0eWxlZC5oMWBcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIHBhZGRpbmctYm90dG9tOiAxMHJlbTtcclxuYFxyXG5cclxuY29uc3QgUmVsYXRpdmUgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuYFxyXG5cclxuY29uc3QgRmxleCA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuYFxyXG5cclxuZXhwb3J0IGNvbnN0IEhvcml6b250YWxDZW50ZXIgPSBzdHlsZWQoRmxleClgXHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG5cclxuICBtYXgtd2lkdGg6IDI1cmVtO1xyXG5gXHJcblxyXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBoZWlnaHQ6IHN0cmV0Y2g7XHJcbiAgd2lkdGg6IDEwMCU7XHJcblxyXG4gIGJhY2tncm91bmQ6ICNlY2YwZjE7XHJcbmBcclxuXHJcbmNvbnN0IEl0ZW0gPSBzdHlsZWQuZGl2YFxyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBmb250LXNpemU6IDJyZW07XHJcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XHJcblxyXG4gIHdpZHRoOiAkeyh7c2l6ZX0pID0+IGAke3NpemV9cmVtYH07XHJcbiAgaGVpZ2h0OiAkeyh7c2l6ZX0pID0+IGAke3NpemV9cmVtYH07XHJcblxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcblxyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbmBcclxuXHJcbmZ1bmN0aW9uIGdldFByZXZFbGVtZW50KGxpc3QpIHtcclxuICBjb25zdCBzaWJsaW5nID0gbGlzdFswXS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXHJcbiAgXHJcbiAgaWYgKHNpYmxpbmcgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgcmV0dXJuIHNpYmxpbmdcclxuICB9XHJcblxyXG4gIHJldHVybiBzaWJsaW5nXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE5leHRFbGVtZW50KGxpc3QpIHtcclxuICBjb25zdCBzaWJsaW5nID0gbGlzdFtsaXN0Lmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZ1xyXG5cclxuICBpZiAoc2libGluZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gc2libGluZ1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG51bGxcclxufVxyXG5cclxuZnVuY3Rpb24gdXNlUG9zaXRpb24ocmVmKSB7XHJcbiAgY29uc3QgW3ByZXZFbGVtZW50LCBzZXRQcmV2RWxlbWVudF0gPSBSZWFjdC51c2VTdGF0ZShudWxsKVxyXG4gIGNvbnN0IFtuZXh0RWxlbWVudCwgc2V0TmV4dEVsZW1lbnRdID0gUmVhY3QudXNlU3RhdGUobnVsbClcclxuXHJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSByZWYuY3VycmVudFxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZSA9ICgpID0+IHtcclxuICAgICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICBcclxuICAgICAgY29uc3QgdmlzaWJsZUVsZW1lbnRzID0gQXJyYXkuZnJvbShlbGVtZW50LmNoaWxkcmVuKS5maWx0ZXIoKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRSZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgcmV0dXJuIGNoaWxkUmVjdC5sZWZ0ID49IHJlY3QubGVmdCAmJiBjaGlsZFJlY3QucmlnaHQgPD0gcmVjdC5yaWdodFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgaWYgKHZpc2libGVFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgc2V0UHJldkVsZW1lbnQoZ2V0UHJldkVsZW1lbnQodmlzaWJsZUVsZW1lbnRzKSlcclxuICAgICAgICBzZXROZXh0RWxlbWVudChnZXROZXh0RWxlbWVudCh2aXNpYmxlRWxlbWVudHMpKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKClcclxuXHJcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHVwZGF0ZSwge3Bhc3NpdmU6IHRydWV9KVxyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdXBkYXRlLCB7cGFzc2l2ZTogdHJ1ZX0pXHJcbiAgICB9XHJcbiAgfSwgW3JlZl0pXHJcblxyXG4gIGNvbnN0IHNjcm9sbFRvRWxlbWVudCA9IFJlYWN0LnVzZUNhbGxiYWNrKFxyXG4gICAgKGVsZW1lbnQpID0+IHtcclxuICAgICAgY29uc3QgY3VycmVudE5vZGUgPSByZWYuY3VycmVudFxyXG5cclxuICAgICAgaWYgKCFjdXJyZW50Tm9kZSB8fCAhZWxlbWVudCkgcmV0dXJuXHJcblxyXG4gICAgICBsZXQgbmV3U2Nyb2xsUG9zaXRpb25cclxuXHJcbiAgICAgIG5ld1Njcm9sbFBvc2l0aW9uID1cclxuICAgICAgICBlbGVtZW50Lm9mZnNldExlZnQgK1xyXG4gICAgICAgIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLyAyIC1cclxuICAgICAgICBjdXJyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDJcclxuXHJcbiAgICAgIGN1cnJlbnROb2RlLnNjcm9sbCh7XHJcbiAgICAgICAgbGVmdDogbmV3U2Nyb2xsUG9zaXRpb24sXHJcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIFtyZWZdLFxyXG4gIClcclxuXHJcbiAgY29uc3Qgc2Nyb2xsUmlnaHQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBzY3JvbGxUb0VsZW1lbnQobmV4dEVsZW1lbnQpLCBbXHJcbiAgICBzY3JvbGxUb0VsZW1lbnQsXHJcbiAgICBuZXh0RWxlbWVudCxcclxuICBdKVxyXG5cclxuICBjb25zdCBzY3JvbGxMZWZ0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4gc2Nyb2xsVG9FbGVtZW50KHByZXZFbGVtZW50KSwgW1xyXG4gICAgc2Nyb2xsVG9FbGVtZW50LFxyXG4gICAgcHJldkVsZW1lbnQsXHJcbiAgXSlcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGhhc0l0ZW1zT25MZWZ0OiBwcmV2RWxlbWVudCAhPT0gbnVsbCxcclxuICAgIGhhc0l0ZW1zT25SaWdodDogbmV4dEVsZW1lbnQgIT09IG51bGwsXHJcbiAgICBzY3JvbGxSaWdodCxcclxuICAgIHNjcm9sbExlZnQsXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBDYXJvdXNlckNvbnRhaW5lciA9IHN0eWxlZChSZWxhdGl2ZSlgXHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuYFxyXG5cclxuIGNvbnN0IENhcm91c2VsSXRlbSA9IHN0eWxlZC5kaXZgXHJcbiAgZmxleDogMCAwIGF1dG87XHJcblxyXG4gIG1hcmdpbi1sZWZ0OiAxcmVtO1xyXG5gXHJcblxyXG4gY29uc3QgQ2Fyb3VzZWxCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuXHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICB0b3A6IDUwJTtcclxuICB6LWluZGV4OiAxO1xyXG5cclxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dDtcclxuXHJcbiAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgcGFkZGluZzogMC41cmVtO1xyXG5gXHJcbiBjb25zdCBMZWZ0Q2Fyb3VzZWxCdXR0b24gPSBzdHlsZWQoQ2Fyb3VzZWxCdXR0b24pYFxyXG4gIGxlZnQ6IDA7XHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTEwMCUsIC01MCUpO1xyXG5cclxuICAke0Nhcm91c2VyQ29udGFpbmVyfTpob3ZlciAmIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAlLCAtNTAlKTtcclxuICB9XHJcblxyXG4gIHZpc2liaWxpdHk6ICR7KHtoYXNJdGVtc09uTGVmdH0pID0+IChoYXNJdGVtc09uTGVmdCA/IGBhbGxgIDogYGhpZGRlbmApfTtcclxuYFxyXG5cclxuIGNvbnN0IFJpZ2h0Q2Fyb3VzZWxCdXR0b24gPSBzdHlsZWQoQ2Fyb3VzZWxCdXR0b24pYFxyXG4gIHJpZ2h0OiAwO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDEwMCUsIC01MCUpO1xyXG5cclxuICAke0Nhcm91c2VyQ29udGFpbmVyfTpob3ZlciAmIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAlLCAtNTAlKTtcclxuICB9XHJcblxyXG4gIHZpc2liaWxpdHk6ICR7KHtoYXNJdGVtc09uUmlnaHR9KSA9PiAoaGFzSXRlbXNPblJpZ2h0ID8gYGFsbGAgOiBgaGlkZGVuYCl9O1xyXG5gXHJcblxyXG4gY29uc3QgQ2Fyb3VzZXJDb250YWluZXJJbm5lciA9IHN0eWxlZChGbGV4KWBcclxuICBvdmVyZmxvdy14OiBzY3JvbGw7XHJcbiAgc2Nyb2xsLXNuYXAtdHlwZTogeCBtYW5kYXRvcnk7XHJcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lO1xyXG4gIHNjcm9sbGJhci13aWR0aDogbm9uZTtcclxuXHJcbiAgLy8gb2Zmc2V0IGZvciBjaGlsZHJlbiBzcGFjaW5nXHJcbiAgbWFyZ2luLWxlZnQ6IC0xcmVtO1xyXG5cclxuICAmOjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gIH1cclxuXHJcbiAgJHtDYXJvdXNlbEl0ZW19ICYge1xyXG4gICAgc2Nyb2xsLXNuYXAtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IEFycm93TGVmdCA9ICh7c2l6ZSA9IDMwLCBjb2xvciA9ICcjMDAwMDAwJ30pID0+IChcclxuICA8c3ZnXHJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgIHdpZHRoPXtzaXplfVxyXG4gICAgaGVpZ2h0PXtzaXplfVxyXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXHJcbiAgICBmaWxsPVwibm9uZVwiXHJcbiAgICBzdHJva2U9e2NvbG9yfVxyXG4gICAgc3Ryb2tlV2lkdGg9XCIyXCJcclxuICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXHJcbiAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcclxuICA+XHJcbiAgICA8cGF0aCBkPVwiTTE5IDEySDZNMTIgNWwtNyA3IDcgN1wiIC8+XHJcbiAgPC9zdmc+XHJcbilcclxuXHJcblxyXG5jb25zdCBBcnJvd1JpZ2h0ID0gKHtzaXplID0gMzAsIGNvbG9yID0gJyMwMDAwMDAnfSkgPT4gKFxyXG4gIDxzdmdcclxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgd2lkdGg9e3NpemV9XHJcbiAgICBoZWlnaHQ9e3NpemV9XHJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgIGZpbGw9XCJub25lXCJcclxuICAgIHN0cm9rZT17Y29sb3J9XHJcbiAgICBzdHJva2VXaWR0aD1cIjJcIlxyXG4gICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcclxuICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNNSAxMmgxM00xMiA1bDcgNy03IDdcIiAvPlxyXG4gIDwvc3ZnPlxyXG4pXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENhcm91c2VsKHtjaGlsZHJlbn0pIHtcclxuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYoKVxyXG5cclxuICBjb25zdCB7XHJcbiAgICBoYXNJdGVtc09uTGVmdCxcclxuICAgIGhhc0l0ZW1zT25SaWdodCxcclxuICAgIHNjcm9sbFJpZ2h0LFxyXG4gICAgc2Nyb2xsTGVmdCxcclxuICB9ID0gdXNlUG9zaXRpb24ocmVmKVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPENhcm91c2VyQ29udGFpbmVyIHJvbGU9XCJyZWdpb25cIiBhcmlhLWxhYmVsPVwiQ29sb3JzIGNhcm91c2VsXCI+XHJcbiAgICAgIDxDYXJvdXNlckNvbnRhaW5lcklubmVyIHJlZj17cmVmfT5cclxuICAgICAgICB7UmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICA8Q2Fyb3VzZWxJdGVtIGtleT17aW5kZXh9PntjaGlsZH08L0Nhcm91c2VsSXRlbT5cclxuICAgICAgICApKX1cclxuICAgICAgPC9DYXJvdXNlckNvbnRhaW5lcklubmVyPlxyXG4gICAgICA8TGVmdENhcm91c2VsQnV0dG9uIGhhc0l0ZW1zT25MZWZ0PXtoYXNJdGVtc09uTGVmdH0gb25DbGljaz17c2Nyb2xsTGVmdH0gYXJpYS1sYWJlbD0nUHJldmlvdXMgc2xpZGUnPlxyXG4gICAgICAgIDxBcnJvd0xlZnQgLz5cclxuICAgICAgPC9MZWZ0Q2Fyb3VzZWxCdXR0b24+XHJcbiAgICAgIDxSaWdodENhcm91c2VsQnV0dG9uXHJcbiAgICAgICAgaGFzSXRlbXNPblJpZ2h0PXtoYXNJdGVtc09uUmlnaHR9XHJcbiAgICAgICAgb25DbGljaz17c2Nyb2xsUmlnaHR9XHJcbiAgICAgICAgYXJpYS1sYWJlbD0nTmV4dCBzbGlkZSdcclxuICAgICAgPlxyXG4gICAgICAgIDxBcnJvd1JpZ2h0IC8+XHJcbiAgICAgIDwvUmlnaHRDYXJvdXNlbEJ1dHRvbj5cclxuICAgIDwvQ2Fyb3VzZXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY29sb3JzID0gW1xyXG4gICcjZjFjNDBmJyxcclxuICAnI2YzOWMxMicsXHJcbiAgJyNlNzRjM2MnLFxyXG4gICcjMTZhMDg1JyxcclxuICAnIzI5ODBiOScsXHJcbiAgJyM4ZTQ0YWQnLFxyXG4gICcjMmMzZTUwJyxcclxuICAnIzk1YTVhNicsXHJcbl1cclxuXHJcbiJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Flex=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e99\",label:\"Flex\"})( false?undefined:{name:\"zjik7\",styles:\"display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HorizontalCenter=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(Flex, false?undefined:{target:\"e10yu2e98\",label:\"HorizontalCenter\"})( false?undefined:{name:\"14idjmp\",styles:\"justify-content:center;margin-left:auto;margin-right:auto;max-width:25rem\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Container=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e97\",label:\"Container\"})( false?undefined:{name:\"3fnon\",styles:\"height:stretch;width:100%;background:#ecf0f1\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ29kZXNpZ25PbWVuXFxEZXNrdG9wXFxKTFxcV2ViQ2xhdXp6XFxjbGF1enppYWdvbWV6V2ViXFxwYWNrYWdlc1xcY2xhdXp6aWEtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcQ2Fyb3VzZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0JtQyIsImZpbGUiOiJDOlxcVXNlcnNcXENvZGVzaWduT21lblxcRGVza3RvcFxcSkxcXFdlYkNsYXV6elxcY2xhdXp6aWFnb21leldlYlxccGFja2FnZXNcXGNsYXV6emlhLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXENhcm91c2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHlsZWQsIGNzc30gZnJvbSAnZnJvbnRpdHknXHJcblxyXG5leHBvcnQgY29uc3QgSDEgPSBzdHlsZWQuaDFgXHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbjogMDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTByZW07XHJcbmBcclxuXHJcbmNvbnN0IFJlbGF0aXZlID0gc3R5bGVkLmRpdmBcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbmBcclxuXHJcbmNvbnN0IEZsZXggPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBIb3Jpem9udGFsQ2VudGVyID0gc3R5bGVkKEZsZXgpYFxyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gIG1hcmdpbi1yaWdodDogYXV0bztcclxuXHJcbiAgbWF4LXdpZHRoOiAyNXJlbTtcclxuYFxyXG5cclxuZXhwb3J0IGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgaGVpZ2h0OiBzdHJldGNoO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG5cclxuICBiYWNrZ3JvdW5kOiAjZWNmMGYxO1xyXG5gXHJcblxyXG5jb25zdCBJdGVtID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgZm9udC1zaXplOiAycmVtO1xyXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG5cclxuICB3aWR0aDogJHsoe3NpemV9KSA9PiBgJHtzaXplfXJlbWB9O1xyXG4gIGhlaWdodDogJHsoe3NpemV9KSA9PiBgJHtzaXplfXJlbWB9O1xyXG5cclxuICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5gXHJcblxyXG5mdW5jdGlvbiBnZXRQcmV2RWxlbWVudChsaXN0KSB7XHJcbiAgY29uc3Qgc2libGluZyA9IGxpc3RbMF0ucHJldmlvdXNFbGVtZW50U2libGluZ1xyXG4gIFxyXG4gIGlmIChzaWJsaW5nIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiBzaWJsaW5nXHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2libGluZ1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXROZXh0RWxlbWVudChsaXN0KSB7XHJcbiAgY29uc3Qgc2libGluZyA9IGxpc3RbbGlzdC5sZW5ndGggLSAxXS5uZXh0RWxlbWVudFNpYmxpbmdcclxuXHJcbiAgaWYgKHNpYmxpbmcgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgcmV0dXJuIHNpYmxpbmdcclxuICB9XHJcblxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVzZVBvc2l0aW9uKHJlZikge1xyXG4gIGNvbnN0IFtwcmV2RWxlbWVudCwgc2V0UHJldkVsZW1lbnRdID0gUmVhY3QudXNlU3RhdGUobnVsbClcclxuICBjb25zdCBbbmV4dEVsZW1lbnQsIHNldE5leHRFbGVtZW50XSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXHJcblxyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gcmVmLmN1cnJlbnRcclxuXHJcbiAgICBjb25zdCB1cGRhdGUgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICAgXHJcbiAgICAgIGNvbnN0IHZpc2libGVFbGVtZW50cyA9IEFycmF5LmZyb20oZWxlbWVudC5jaGlsZHJlbikuZmlsdGVyKChjaGlsZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkUmVjdCA9IGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHJldHVybiBjaGlsZFJlY3QubGVmdCA+PSByZWN0LmxlZnQgJiYgY2hpbGRSZWN0LnJpZ2h0IDw9IHJlY3QucmlnaHRcclxuICAgICAgfSlcclxuXHJcbiAgICAgIGlmICh2aXNpYmxlRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHNldFByZXZFbGVtZW50KGdldFByZXZFbGVtZW50KHZpc2libGVFbGVtZW50cykpXHJcbiAgICAgICAgc2V0TmV4dEVsZW1lbnQoZ2V0TmV4dEVsZW1lbnQodmlzaWJsZUVsZW1lbnRzKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpXHJcblxyXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGUsIHtwYXNzaXZlOiB0cnVlfSlcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHVwZGF0ZSwge3Bhc3NpdmU6IHRydWV9KVxyXG4gICAgfVxyXG4gIH0sIFtyZWZdKVxyXG5cclxuICBjb25zdCBzY3JvbGxUb0VsZW1lbnQgPSBSZWFjdC51c2VDYWxsYmFjayhcclxuICAgIChlbGVtZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gcmVmLmN1cnJlbnRcclxuXHJcbiAgICAgIGlmICghY3VycmVudE5vZGUgfHwgIWVsZW1lbnQpIHJldHVyblxyXG5cclxuICAgICAgbGV0IG5ld1Njcm9sbFBvc2l0aW9uXHJcblxyXG4gICAgICBuZXdTY3JvbGxQb3NpdGlvbiA9XHJcbiAgICAgICAgZWxlbWVudC5vZmZzZXRMZWZ0ICtcclxuICAgICAgICBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC8gMiAtXHJcbiAgICAgICAgY3VycmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLyAyXHJcblxyXG4gICAgICBjdXJyZW50Tm9kZS5zY3JvbGwoe1xyXG4gICAgICAgIGxlZnQ6IG5ld1Njcm9sbFBvc2l0aW9uLFxyXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBbcmVmXSxcclxuICApXHJcblxyXG4gIGNvbnN0IHNjcm9sbFJpZ2h0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4gc2Nyb2xsVG9FbGVtZW50KG5leHRFbGVtZW50KSwgW1xyXG4gICAgc2Nyb2xsVG9FbGVtZW50LFxyXG4gICAgbmV4dEVsZW1lbnQsXHJcbiAgXSlcclxuXHJcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHNjcm9sbFRvRWxlbWVudChwcmV2RWxlbWVudCksIFtcclxuICAgIHNjcm9sbFRvRWxlbWVudCxcclxuICAgIHByZXZFbGVtZW50LFxyXG4gIF0pXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBoYXNJdGVtc09uTGVmdDogcHJldkVsZW1lbnQgIT09IG51bGwsXHJcbiAgICBoYXNJdGVtc09uUmlnaHQ6IG5leHRFbGVtZW50ICE9PSBudWxsLFxyXG4gICAgc2Nyb2xsUmlnaHQsXHJcbiAgICBzY3JvbGxMZWZ0LFxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgQ2Fyb3VzZXJDb250YWluZXIgPSBzdHlsZWQoUmVsYXRpdmUpYFxyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlbEl0ZW0gPSBzdHlsZWQuZGl2YFxyXG4gIGZsZXg6IDAgMCBhdXRvO1xyXG5cclxuICBtYXJnaW4tbGVmdDogMXJlbTtcclxuYFxyXG5cclxuIGNvbnN0IENhcm91c2VsQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcblxyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgdG9wOiA1MCU7XHJcbiAgei1pbmRleDogMTtcclxuXHJcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQ7XHJcblxyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIHBhZGRpbmc6IDAuNXJlbTtcclxuYFxyXG4gY29uc3QgTGVmdENhcm91c2VsQnV0dG9uID0gc3R5bGVkKENhcm91c2VsQnV0dG9uKWBcclxuICBsZWZ0OiAwO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0xMDAlLCAtNTAlKTtcclxuXHJcbiAgJHtDYXJvdXNlckNvbnRhaW5lcn06aG92ZXIgJiB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwJSwgLTUwJSk7XHJcbiAgfVxyXG5cclxuICB2aXNpYmlsaXR5OiAkeyh7aGFzSXRlbXNPbkxlZnR9KSA9PiAoaGFzSXRlbXNPbkxlZnQgPyBgYWxsYCA6IGBoaWRkZW5gKX07XHJcbmBcclxuXHJcbiBjb25zdCBSaWdodENhcm91c2VsQnV0dG9uID0gc3R5bGVkKENhcm91c2VsQnV0dG9uKWBcclxuICByaWdodDogMDtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDAlLCAtNTAlKTtcclxuXHJcbiAgJHtDYXJvdXNlckNvbnRhaW5lcn06aG92ZXIgJiB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwJSwgLTUwJSk7XHJcbiAgfVxyXG5cclxuICB2aXNpYmlsaXR5OiAkeyh7aGFzSXRlbXNPblJpZ2h0fSkgPT4gKGhhc0l0ZW1zT25SaWdodCA/IGBhbGxgIDogYGhpZGRlbmApfTtcclxuYFxyXG5cclxuIGNvbnN0IENhcm91c2VyQ29udGFpbmVySW5uZXIgPSBzdHlsZWQoRmxleClgXHJcbiAgb3ZlcmZsb3cteDogc2Nyb2xsO1xyXG4gIHNjcm9sbC1zbmFwLXR5cGU6IHggbWFuZGF0b3J5O1xyXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcclxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7XHJcblxyXG4gIC8vIG9mZnNldCBmb3IgY2hpbGRyZW4gc3BhY2luZ1xyXG4gIG1hcmdpbi1sZWZ0OiAtMXJlbTtcclxuXHJcbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcblxyXG4gICR7Q2Fyb3VzZWxJdGVtfSAmIHtcclxuICAgIHNjcm9sbC1zbmFwLWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG5gXHJcblxyXG5jb25zdCBBcnJvd0xlZnQgPSAoe3NpemUgPSAzMCwgY29sb3IgPSAnIzAwMDAwMCd9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICB3aWR0aD17c2l6ZX1cclxuICAgIGhlaWdodD17c2l6ZX1cclxuICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgc3Ryb2tlPXtjb2xvcn1cclxuICAgIHN0cm9rZVdpZHRoPVwiMlwiXHJcbiAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxyXG4gICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXHJcbiAgPlxyXG4gICAgPHBhdGggZD1cIk0xOSAxMkg2TTEyIDVsLTcgNyA3IDdcIiAvPlxyXG4gIDwvc3ZnPlxyXG4pXHJcblxyXG5cclxuY29uc3QgQXJyb3dSaWdodCA9ICh7c2l6ZSA9IDMwLCBjb2xvciA9ICcjMDAwMDAwJ30pID0+IChcclxuICA8c3ZnXHJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgIHdpZHRoPXtzaXplfVxyXG4gICAgaGVpZ2h0PXtzaXplfVxyXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXHJcbiAgICBmaWxsPVwibm9uZVwiXHJcbiAgICBzdHJva2U9e2NvbG9yfVxyXG4gICAgc3Ryb2tlV2lkdGg9XCIyXCJcclxuICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXHJcbiAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcclxuICA+XHJcbiAgICA8cGF0aCBkPVwiTTUgMTJoMTNNMTIgNWw3IDctNyA3XCIgLz5cclxuICA8L3N2Zz5cclxuKVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDYXJvdXNlbCh7Y2hpbGRyZW59KSB7XHJcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKClcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgaGFzSXRlbXNPbkxlZnQsXHJcbiAgICBoYXNJdGVtc09uUmlnaHQsXHJcbiAgICBzY3JvbGxSaWdodCxcclxuICAgIHNjcm9sbExlZnQsXHJcbiAgfSA9IHVzZVBvc2l0aW9uKHJlZilcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDYXJvdXNlckNvbnRhaW5lciByb2xlPVwicmVnaW9uXCIgYXJpYS1sYWJlbD1cIkNvbG9ycyBjYXJvdXNlbFwiPlxyXG4gICAgICA8Q2Fyb3VzZXJDb250YWluZXJJbm5lciByZWY9e3JlZn0+XHJcbiAgICAgICAge1JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgPENhcm91c2VsSXRlbSBrZXk9e2luZGV4fT57Y2hpbGR9PC9DYXJvdXNlbEl0ZW0+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvQ2Fyb3VzZXJDb250YWluZXJJbm5lcj5cclxuICAgICAgPExlZnRDYXJvdXNlbEJ1dHRvbiBoYXNJdGVtc09uTGVmdD17aGFzSXRlbXNPbkxlZnR9IG9uQ2xpY2s9e3Njcm9sbExlZnR9IGFyaWEtbGFiZWw9J1ByZXZpb3VzIHNsaWRlJz5cclxuICAgICAgICA8QXJyb3dMZWZ0IC8+XHJcbiAgICAgIDwvTGVmdENhcm91c2VsQnV0dG9uPlxyXG4gICAgICA8UmlnaHRDYXJvdXNlbEJ1dHRvblxyXG4gICAgICAgIGhhc0l0ZW1zT25SaWdodD17aGFzSXRlbXNPblJpZ2h0fVxyXG4gICAgICAgIG9uQ2xpY2s9e3Njcm9sbFJpZ2h0fVxyXG4gICAgICAgIGFyaWEtbGFiZWw9J05leHQgc2xpZGUnXHJcbiAgICAgID5cclxuICAgICAgICA8QXJyb3dSaWdodCAvPlxyXG4gICAgICA8L1JpZ2h0Q2Fyb3VzZWxCdXR0b24+XHJcbiAgICA8L0Nhcm91c2VyQ29udGFpbmVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNvbG9ycyA9IFtcclxuICAnI2YxYzQwZicsXHJcbiAgJyNmMzljMTInLFxyXG4gICcjZTc0YzNjJyxcclxuICAnIzE2YTA4NScsXHJcbiAgJyMyOTgwYjknLFxyXG4gICcjOGU0NGFkJyxcclxuICAnIzJjM2U1MCcsXHJcbiAgJyM5NWE1YTYnLFxyXG5dXHJcblxyXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Item=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e96\",label:\"Item\"})(\"color:white;font-size:2rem;text-transform:capitalize;width:\",({size})=>`${size}rem`,\";height:\",({size})=>`${size}rem`,\";display:flex;align-items:center;justify-content:center;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));function getPrevElement(list){const sibling=list[0].previousElementSibling;if(sibling instanceof HTMLElement){return sibling;}return sibling;}function getNextElement(list){const sibling=list[list.length-1].nextElementSibling;if(sibling instanceof HTMLElement){return sibling;}return null;}function usePosition(ref){const[prevElement,setPrevElement]=React.useState(null);const[nextElement,setNextElement]=React.useState(null);React.useEffect(()=>{const element=ref.current;const update=()=>{const rect=element.getBoundingClientRect();const visibleElements=Array.from(element.children).filter(child=>{const childRect=child.getBoundingClientRect();return childRect.left>=rect.left&&childRect.right<=rect.right;});if(visibleElements.length>0){setPrevElement(getPrevElement(visibleElements));setNextElement(getNextElement(visibleElements));}};update();element.addEventListener('scroll',update,{passive:true});return()=>{element.removeEventListener('scroll',update,{passive:true});};},[ref]);const scrollToElement=React.useCallback(element=>{const currentNode=ref.current;if(!currentNode||!element)return;let newScrollPosition;newScrollPosition=element.offsetLeft+element.getBoundingClientRect().width/2-currentNode.getBoundingClientRect().width/2;currentNode.scroll({left:newScrollPosition,behavior:'smooth'});},[ref]);const scrollRight=React.useCallback(()=>scrollToElement(nextElement),[scrollToElement,nextElement]);const scrollLeft=React.useCallback(()=>scrollToElement(prevElement),[scrollToElement,prevElement]);return{hasItemsOnLeft:prevElement!==null,hasItemsOnRight:nextElement!==null,scrollRight,scrollLeft};}const CarouserContainer=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(Relative, false?undefined:{target:\"e10yu2e95\",label:\"CarouserContainer\"})( false?undefined:{name:\"d3v9zr\",styles:\"overflow:hidden\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CarouselItem=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"e10yu2e94\",label:\"CarouselItem\"})( false?undefined:{name:\"1jvczce\",styles:\"flex:0 0 auto;margin-left:1rem\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CarouselButton=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"button\", false?undefined:{target:\"e10yu2e93\",label:\"CarouselButton\"})( false?undefined:{name:\"z3ta42\",styles:\"position:absolute;cursor:pointer;top:50%;z-index:1;transition:transform 0.1s ease-in-out;background:white;border-radius:15px;border:none;padding:0.5rem\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const LeftCarouselButton=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(CarouselButton, false?undefined:{target:\"e10yu2e92\",label:\"LeftCarouselButton\"})(\"left:0;transform:translate(-100%, -50%);\",CarouserContainer,\":hover &{transform:translate(0%, -50%);}visibility:\",({hasItemsOnLeft})=>hasItemsOnLeft?`all`:`hidden`,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const RightCarouselButton=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(CarouselButton, false?undefined:{target:\"e10yu2e91\",label:\"RightCarouselButton\"})(\"right:0;transform:translate(100%, -50%);\",CarouserContainer,\":hover &{transform:translate(0%, -50%);}visibility:\",({hasItemsOnRight})=>hasItemsOnRight?`all`:`hidden`,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const CarouserContainerInner=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(Flex, false?undefined:{target:\"e10yu2e90\",label:\"CarouserContainerInner\"})(\"overflow-x:scroll;scroll-snap-type:x mandatory;-ms-overflow-style:none;scrollbar-width:none;margin-left:-1rem;&::-webkit-scrollbar{display:none;}\",CarouselItem,\" &{scroll-snap-align:center;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ29kZXNpZ25PbWVuXFxEZXNrdG9wXFxKTFxcV2ViQ2xhdXp6XFxjbGF1enppYWdvbWV6V2ViXFxwYWNrYWdlc1xcY2xhdXp6aWEtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcQ2Fyb3VzZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUw0QyIsImZpbGUiOiJDOlxcVXNlcnNcXENvZGVzaWduT21lblxcRGVza3RvcFxcSkxcXFdlYkNsYXV6elxcY2xhdXp6aWFnb21leldlYlxccGFja2FnZXNcXGNsYXV6emlhLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXENhcm91c2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHlsZWQsIGNzc30gZnJvbSAnZnJvbnRpdHknXHJcblxyXG5leHBvcnQgY29uc3QgSDEgPSBzdHlsZWQuaDFgXHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbjogMDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTByZW07XHJcbmBcclxuXHJcbmNvbnN0IFJlbGF0aXZlID0gc3R5bGVkLmRpdmBcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbmBcclxuXHJcbmNvbnN0IEZsZXggPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBIb3Jpem9udGFsQ2VudGVyID0gc3R5bGVkKEZsZXgpYFxyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gIG1hcmdpbi1yaWdodDogYXV0bztcclxuXHJcbiAgbWF4LXdpZHRoOiAyNXJlbTtcclxuYFxyXG5cclxuZXhwb3J0IGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgaGVpZ2h0OiBzdHJldGNoO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG5cclxuICBiYWNrZ3JvdW5kOiAjZWNmMGYxO1xyXG5gXHJcblxyXG5jb25zdCBJdGVtID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgZm9udC1zaXplOiAycmVtO1xyXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG5cclxuICB3aWR0aDogJHsoe3NpemV9KSA9PiBgJHtzaXplfXJlbWB9O1xyXG4gIGhlaWdodDogJHsoe3NpemV9KSA9PiBgJHtzaXplfXJlbWB9O1xyXG5cclxuICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5gXHJcblxyXG5mdW5jdGlvbiBnZXRQcmV2RWxlbWVudChsaXN0KSB7XHJcbiAgY29uc3Qgc2libGluZyA9IGxpc3RbMF0ucHJldmlvdXNFbGVtZW50U2libGluZ1xyXG4gIFxyXG4gIGlmIChzaWJsaW5nIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiBzaWJsaW5nXHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2libGluZ1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXROZXh0RWxlbWVudChsaXN0KSB7XHJcbiAgY29uc3Qgc2libGluZyA9IGxpc3RbbGlzdC5sZW5ndGggLSAxXS5uZXh0RWxlbWVudFNpYmxpbmdcclxuXHJcbiAgaWYgKHNpYmxpbmcgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgcmV0dXJuIHNpYmxpbmdcclxuICB9XHJcblxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVzZVBvc2l0aW9uKHJlZikge1xyXG4gIGNvbnN0IFtwcmV2RWxlbWVudCwgc2V0UHJldkVsZW1lbnRdID0gUmVhY3QudXNlU3RhdGUobnVsbClcclxuICBjb25zdCBbbmV4dEVsZW1lbnQsIHNldE5leHRFbGVtZW50XSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXHJcblxyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gcmVmLmN1cnJlbnRcclxuXHJcbiAgICBjb25zdCB1cGRhdGUgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICAgXHJcbiAgICAgIGNvbnN0IHZpc2libGVFbGVtZW50cyA9IEFycmF5LmZyb20oZWxlbWVudC5jaGlsZHJlbikuZmlsdGVyKChjaGlsZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkUmVjdCA9IGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHJldHVybiBjaGlsZFJlY3QubGVmdCA+PSByZWN0LmxlZnQgJiYgY2hpbGRSZWN0LnJpZ2h0IDw9IHJlY3QucmlnaHRcclxuICAgICAgfSlcclxuXHJcbiAgICAgIGlmICh2aXNpYmxlRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHNldFByZXZFbGVtZW50KGdldFByZXZFbGVtZW50KHZpc2libGVFbGVtZW50cykpXHJcbiAgICAgICAgc2V0TmV4dEVsZW1lbnQoZ2V0TmV4dEVsZW1lbnQodmlzaWJsZUVsZW1lbnRzKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpXHJcblxyXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGUsIHtwYXNzaXZlOiB0cnVlfSlcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHVwZGF0ZSwge3Bhc3NpdmU6IHRydWV9KVxyXG4gICAgfVxyXG4gIH0sIFtyZWZdKVxyXG5cclxuICBjb25zdCBzY3JvbGxUb0VsZW1lbnQgPSBSZWFjdC51c2VDYWxsYmFjayhcclxuICAgIChlbGVtZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gcmVmLmN1cnJlbnRcclxuXHJcbiAgICAgIGlmICghY3VycmVudE5vZGUgfHwgIWVsZW1lbnQpIHJldHVyblxyXG5cclxuICAgICAgbGV0IG5ld1Njcm9sbFBvc2l0aW9uXHJcblxyXG4gICAgICBuZXdTY3JvbGxQb3NpdGlvbiA9XHJcbiAgICAgICAgZWxlbWVudC5vZmZzZXRMZWZ0ICtcclxuICAgICAgICBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC8gMiAtXHJcbiAgICAgICAgY3VycmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLyAyXHJcblxyXG4gICAgICBjdXJyZW50Tm9kZS5zY3JvbGwoe1xyXG4gICAgICAgIGxlZnQ6IG5ld1Njcm9sbFBvc2l0aW9uLFxyXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBbcmVmXSxcclxuICApXHJcblxyXG4gIGNvbnN0IHNjcm9sbFJpZ2h0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4gc2Nyb2xsVG9FbGVtZW50KG5leHRFbGVtZW50KSwgW1xyXG4gICAgc2Nyb2xsVG9FbGVtZW50LFxyXG4gICAgbmV4dEVsZW1lbnQsXHJcbiAgXSlcclxuXHJcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHNjcm9sbFRvRWxlbWVudChwcmV2RWxlbWVudCksIFtcclxuICAgIHNjcm9sbFRvRWxlbWVudCxcclxuICAgIHByZXZFbGVtZW50LFxyXG4gIF0pXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBoYXNJdGVtc09uTGVmdDogcHJldkVsZW1lbnQgIT09IG51bGwsXHJcbiAgICBoYXNJdGVtc09uUmlnaHQ6IG5leHRFbGVtZW50ICE9PSBudWxsLFxyXG4gICAgc2Nyb2xsUmlnaHQsXHJcbiAgICBzY3JvbGxMZWZ0LFxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgQ2Fyb3VzZXJDb250YWluZXIgPSBzdHlsZWQoUmVsYXRpdmUpYFxyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlbEl0ZW0gPSBzdHlsZWQuZGl2YFxyXG4gIGZsZXg6IDAgMCBhdXRvO1xyXG5cclxuICBtYXJnaW4tbGVmdDogMXJlbTtcclxuYFxyXG5cclxuIGNvbnN0IENhcm91c2VsQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcblxyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgdG9wOiA1MCU7XHJcbiAgei1pbmRleDogMTtcclxuXHJcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQ7XHJcblxyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIHBhZGRpbmc6IDAuNXJlbTtcclxuYFxyXG4gY29uc3QgTGVmdENhcm91c2VsQnV0dG9uID0gc3R5bGVkKENhcm91c2VsQnV0dG9uKWBcclxuICBsZWZ0OiAwO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0xMDAlLCAtNTAlKTtcclxuXHJcbiAgJHtDYXJvdXNlckNvbnRhaW5lcn06aG92ZXIgJiB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwJSwgLTUwJSk7XHJcbiAgfVxyXG5cclxuICB2aXNpYmlsaXR5OiAkeyh7aGFzSXRlbXNPbkxlZnR9KSA9PiAoaGFzSXRlbXNPbkxlZnQgPyBgYWxsYCA6IGBoaWRkZW5gKX07XHJcbmBcclxuXHJcbiBjb25zdCBSaWdodENhcm91c2VsQnV0dG9uID0gc3R5bGVkKENhcm91c2VsQnV0dG9uKWBcclxuICByaWdodDogMDtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDAlLCAtNTAlKTtcclxuXHJcbiAgJHtDYXJvdXNlckNvbnRhaW5lcn06aG92ZXIgJiB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwJSwgLTUwJSk7XHJcbiAgfVxyXG5cclxuICB2aXNpYmlsaXR5OiAkeyh7aGFzSXRlbXNPblJpZ2h0fSkgPT4gKGhhc0l0ZW1zT25SaWdodCA/IGBhbGxgIDogYGhpZGRlbmApfTtcclxuYFxyXG5cclxuIGNvbnN0IENhcm91c2VyQ29udGFpbmVySW5uZXIgPSBzdHlsZWQoRmxleClgXHJcbiAgb3ZlcmZsb3cteDogc2Nyb2xsO1xyXG4gIHNjcm9sbC1zbmFwLXR5cGU6IHggbWFuZGF0b3J5O1xyXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcclxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7XHJcblxyXG4gIC8vIG9mZnNldCBmb3IgY2hpbGRyZW4gc3BhY2luZ1xyXG4gIG1hcmdpbi1sZWZ0OiAtMXJlbTtcclxuXHJcbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcblxyXG4gICR7Q2Fyb3VzZWxJdGVtfSAmIHtcclxuICAgIHNjcm9sbC1zbmFwLWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG5gXHJcblxyXG5jb25zdCBBcnJvd0xlZnQgPSAoe3NpemUgPSAzMCwgY29sb3IgPSAnIzAwMDAwMCd9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICB3aWR0aD17c2l6ZX1cclxuICAgIGhlaWdodD17c2l6ZX1cclxuICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgc3Ryb2tlPXtjb2xvcn1cclxuICAgIHN0cm9rZVdpZHRoPVwiMlwiXHJcbiAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxyXG4gICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXHJcbiAgPlxyXG4gICAgPHBhdGggZD1cIk0xOSAxMkg2TTEyIDVsLTcgNyA3IDdcIiAvPlxyXG4gIDwvc3ZnPlxyXG4pXHJcblxyXG5cclxuY29uc3QgQXJyb3dSaWdodCA9ICh7c2l6ZSA9IDMwLCBjb2xvciA9ICcjMDAwMDAwJ30pID0+IChcclxuICA8c3ZnXHJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgIHdpZHRoPXtzaXplfVxyXG4gICAgaGVpZ2h0PXtzaXplfVxyXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXHJcbiAgICBmaWxsPVwibm9uZVwiXHJcbiAgICBzdHJva2U9e2NvbG9yfVxyXG4gICAgc3Ryb2tlV2lkdGg9XCIyXCJcclxuICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXHJcbiAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcclxuICA+XHJcbiAgICA8cGF0aCBkPVwiTTUgMTJoMTNNMTIgNWw3IDctNyA3XCIgLz5cclxuICA8L3N2Zz5cclxuKVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDYXJvdXNlbCh7Y2hpbGRyZW59KSB7XHJcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKClcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgaGFzSXRlbXNPbkxlZnQsXHJcbiAgICBoYXNJdGVtc09uUmlnaHQsXHJcbiAgICBzY3JvbGxSaWdodCxcclxuICAgIHNjcm9sbExlZnQsXHJcbiAgfSA9IHVzZVBvc2l0aW9uKHJlZilcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDYXJvdXNlckNvbnRhaW5lciByb2xlPVwicmVnaW9uXCIgYXJpYS1sYWJlbD1cIkNvbG9ycyBjYXJvdXNlbFwiPlxyXG4gICAgICA8Q2Fyb3VzZXJDb250YWluZXJJbm5lciByZWY9e3JlZn0+XHJcbiAgICAgICAge1JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgPENhcm91c2VsSXRlbSBrZXk9e2luZGV4fT57Y2hpbGR9PC9DYXJvdXNlbEl0ZW0+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvQ2Fyb3VzZXJDb250YWluZXJJbm5lcj5cclxuICAgICAgPExlZnRDYXJvdXNlbEJ1dHRvbiBoYXNJdGVtc09uTGVmdD17aGFzSXRlbXNPbkxlZnR9IG9uQ2xpY2s9e3Njcm9sbExlZnR9IGFyaWEtbGFiZWw9J1ByZXZpb3VzIHNsaWRlJz5cclxuICAgICAgICA8QXJyb3dMZWZ0IC8+XHJcbiAgICAgIDwvTGVmdENhcm91c2VsQnV0dG9uPlxyXG4gICAgICA8UmlnaHRDYXJvdXNlbEJ1dHRvblxyXG4gICAgICAgIGhhc0l0ZW1zT25SaWdodD17aGFzSXRlbXNPblJpZ2h0fVxyXG4gICAgICAgIG9uQ2xpY2s9e3Njcm9sbFJpZ2h0fVxyXG4gICAgICAgIGFyaWEtbGFiZWw9J05leHQgc2xpZGUnXHJcbiAgICAgID5cclxuICAgICAgICA8QXJyb3dSaWdodCAvPlxyXG4gICAgICA8L1JpZ2h0Q2Fyb3VzZWxCdXR0b24+XHJcbiAgICA8L0Nhcm91c2VyQ29udGFpbmVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNvbG9ycyA9IFtcclxuICAnI2YxYzQwZicsXHJcbiAgJyNmMzljMTInLFxyXG4gICcjZTc0YzNjJyxcclxuICAnIzE2YTA4NScsXHJcbiAgJyMyOTgwYjknLFxyXG4gICcjOGU0NGFkJyxcclxuICAnIzJjM2U1MCcsXHJcbiAgJyM5NWE1YTYnLFxyXG5dXHJcblxyXG4iXX0= */\"));const ArrowLeft=({size:_size=30,color:_color='#000000'})=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:_size,height:_size,viewBox:\"0 0 24 24\",fill:\"none\",stroke:_color,strokeWidth:\"2\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"path\",{d:\"M19 12H6M12 5l-7 7 7 7\"})});const ArrowRight=({size:_size2=30,color:_color2='#000000'})=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:_size2,height:_size2,viewBox:\"0 0 24 24\",fill:\"none\",stroke:_color2,strokeWidth:\"2\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"path\",{d:\"M5 12h13M12 5l7 7-7 7\"})});function Carousel({children}){const ref=React.useRef();const{hasItemsOnLeft,hasItemsOnRight,scrollRight,scrollLeft}=usePosition(ref);return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(CarouserContainer,{role:\"region\",\"aria-label\":\"Colors carousel\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(CarouserContainerInner,{ref:ref,children:React.Children.map(children,(child,index)=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(CarouselItem,{children:child},index))}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(LeftCarouselButton,{hasItemsOnLeft:hasItemsOnLeft,onClick:scrollLeft,\"aria-label\":\"Previous slide\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(ArrowLeft,{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(RightCarouselButton,{hasItemsOnRight:hasItemsOnRight,onClick:scrollRight,\"aria-label\":\"Next slide\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(ArrowRight,{})})]});}const colors=['#f1c40f','#f39c12','#e74c3c','#16a085','#2980b9','#8e44ad','#2c3e50','#95a5a6'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jbGF1enppYS10aGVtZS9zcmMvY29tcG9uZW50cy9DYXJvdXNlbC5qcz85Y2ZmIl0sIm5hbWVzIjpbIkgxIiwiUmVsYXRpdmUiLCJGbGV4IiwiSG9yaXpvbnRhbENlbnRlciIsIkNvbnRhaW5lciIsIkl0ZW0iLCJzaXplIiwiZ2V0UHJldkVsZW1lbnQiLCJsaXN0Iiwic2libGluZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJIVE1MRWxlbWVudCIsImdldE5leHRFbGVtZW50IiwibGVuZ3RoIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwidXNlUG9zaXRpb24iLCJyZWYiLCJwcmV2RWxlbWVudCIsInNldFByZXZFbGVtZW50IiwiUmVhY3QiLCJ1c2VTdGF0ZSIsIm5leHRFbGVtZW50Iiwic2V0TmV4dEVsZW1lbnQiLCJ1c2VFZmZlY3QiLCJlbGVtZW50IiwiY3VycmVudCIsInVwZGF0ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ2aXNpYmxlRWxlbWVudHMiLCJBcnJheSIsImZyb20iLCJjaGlsZHJlbiIsImZpbHRlciIsImNoaWxkIiwiY2hpbGRSZWN0IiwibGVmdCIsInJpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2Nyb2xsVG9FbGVtZW50IiwidXNlQ2FsbGJhY2siLCJjdXJyZW50Tm9kZSIsIm5ld1Njcm9sbFBvc2l0aW9uIiwib2Zmc2V0TGVmdCIsIndpZHRoIiwic2Nyb2xsIiwiYmVoYXZpb3IiLCJzY3JvbGxSaWdodCIsInNjcm9sbExlZnQiLCJoYXNJdGVtc09uTGVmdCIsImhhc0l0ZW1zT25SaWdodCIsIkNhcm91c2VyQ29udGFpbmVyIiwiQ2Fyb3VzZWxJdGVtIiwiQ2Fyb3VzZWxCdXR0b24iLCJMZWZ0Q2Fyb3VzZWxCdXR0b24iLCJSaWdodENhcm91c2VsQnV0dG9uIiwiQ2Fyb3VzZXJDb250YWluZXJJbm5lciIsIkFycm93TGVmdCIsImNvbG9yIiwiQXJyb3dSaWdodCIsIkNhcm91c2VsIiwidXNlUmVmIiwiQ2hpbGRyZW4iLCJtYXAiLCJpbmRleCIsImNvbG9ycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztxUkFFTyxLQUFNQSxHQUFFLDRwU0FBUixDQU1QLEtBQU1DLFNBQVEsb29TQUFkLENBSUEsS0FBTUMsS0FBSSx5blNBQVYsQ0FJTyxLQUFNQyxpQkFBZ0IsQ0FBRyxvRUFBTSxDQUFDRCxJQUFQLGdFQUFILHNrU0FBdEIsQ0FRQSxLQUFNRSxVQUFTLDhwU0FBZixDQU9QLEtBQU1DLEtBQUksaUxBS0MsQ0FBQyxDQUFDQyxJQUFELENBQUQsR0FBYSxHQUFFQSxJQUFLLEtBTHJCLFlBTUUsQ0FBQyxDQUFDQSxJQUFELENBQUQsR0FBYSxHQUFFQSxJQUFLLEtBTnRCLGkvUkFBVixDQWNBLFFBQVNDLGVBQVQsQ0FBd0JDLElBQXhCLENBQThCLENBQzVCLEtBQU1DLFFBQU8sQ0FBR0QsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRRSxzQkFBeEIsQ0FFQSxHQUFJRCxPQUFPLFdBQVlFLFlBQXZCLENBQW9DLENBQ2xDLE1BQU9GLFFBQVAsQ0FDRCxDQUVELE1BQU9BLFFBQVAsQ0FDRCxDQUVELFFBQVNHLGVBQVQsQ0FBd0JKLElBQXhCLENBQThCLENBQzVCLEtBQU1DLFFBQU8sQ0FBR0QsSUFBSSxDQUFDQSxJQUFJLENBQUNLLE1BQUwsQ0FBYyxDQUFmLENBQUosQ0FBc0JDLGtCQUF0QyxDQUVBLEdBQUlMLE9BQU8sV0FBWUUsWUFBdkIsQ0FBb0MsQ0FDbEMsTUFBT0YsUUFBUCxDQUNELENBRUQsTUFBTyxLQUFQLENBQ0QsQ0FFRCxRQUFTTSxZQUFULENBQXFCQyxHQUFyQixDQUEwQixDQUN4QixLQUFNLENBQUNDLFdBQUQsQ0FBY0MsY0FBZCxFQUFnQ0MsS0FBSyxDQUFDQyxRQUFOLENBQWUsSUFBZixDQUF0QyxDQUNBLEtBQU0sQ0FBQ0MsV0FBRCxDQUFjQyxjQUFkLEVBQWdDSCxLQUFLLENBQUNDLFFBQU4sQ0FBZSxJQUFmLENBQXRDLENBRUFELEtBQUssQ0FBQ0ksU0FBTixDQUFnQixJQUFNLENBQ3BCLEtBQU1DLFFBQU8sQ0FBR1IsR0FBRyxDQUFDUyxPQUFwQixDQUVBLEtBQU1DLE9BQU0sQ0FBRyxJQUFNLENBQ25CLEtBQU1DLEtBQUksQ0FBR0gsT0FBTyxDQUFDSSxxQkFBUixFQUFiLENBRUEsS0FBTUMsZ0JBQWUsQ0FBR0MsS0FBSyxDQUFDQyxJQUFOLENBQVdQLE9BQU8sQ0FBQ1EsUUFBbkIsRUFBNkJDLE1BQTdCLENBQXFDQyxLQUFELEVBQVcsQ0FDckUsS0FBTUMsVUFBUyxDQUFHRCxLQUFLLENBQUNOLHFCQUFOLEVBQWxCLENBR0EsTUFBT08sVUFBUyxDQUFDQyxJQUFWLEVBQWtCVCxJQUFJLENBQUNTLElBQXZCLEVBQStCRCxTQUFTLENBQUNFLEtBQVYsRUFBbUJWLElBQUksQ0FBQ1UsS0FBOUQsQ0FDRCxDQUx1QixDQUF4QixDQU9BLEdBQUlSLGVBQWUsQ0FBQ2hCLE1BQWhCLENBQXlCLENBQTdCLENBQWdDLENBQzlCSyxjQUFjLENBQUNYLGNBQWMsQ0FBQ3NCLGVBQUQsQ0FBZixDQUFkLENBQ0FQLGNBQWMsQ0FBQ1YsY0FBYyxDQUFDaUIsZUFBRCxDQUFmLENBQWQsQ0FDRCxDQUNGLENBZEQsQ0FnQkFILE1BQU0sR0FFTkYsT0FBTyxDQUFDYyxnQkFBUixDQUF5QixRQUF6QixDQUFtQ1osTUFBbkMsQ0FBMkMsQ0FBQ2EsT0FBTyxDQUFFLElBQVYsQ0FBM0MsRUFFQSxNQUFPLElBQU0sQ0FDWGYsT0FBTyxDQUFDZ0IsbUJBQVIsQ0FBNEIsUUFBNUIsQ0FBc0NkLE1BQXRDLENBQThDLENBQUNhLE9BQU8sQ0FBRSxJQUFWLENBQTlDLEVBQ0QsQ0FGRCxDQUdELENBMUJELENBMEJHLENBQUN2QixHQUFELENBMUJILEVBNEJBLEtBQU15QixnQkFBZSxDQUFHdEIsS0FBSyxDQUFDdUIsV0FBTixDQUNyQmxCLE9BQUQsRUFBYSxDQUNYLEtBQU1tQixZQUFXLENBQUczQixHQUFHLENBQUNTLE9BQXhCLENBRUEsR0FBSSxDQUFDa0IsV0FBRCxFQUFnQixDQUFDbkIsT0FBckIsQ0FBOEIsT0FFOUIsR0FBSW9CLGtCQUFKLENBRUFBLGlCQUFpQixDQUNmcEIsT0FBTyxDQUFDcUIsVUFBUixDQUNBckIsT0FBTyxDQUFDSSxxQkFBUixHQUFnQ2tCLEtBQWhDLENBQXdDLENBRHhDLENBRUFILFdBQVcsQ0FBQ2YscUJBQVosR0FBb0NrQixLQUFwQyxDQUE0QyxDQUg5QyxDQUtBSCxXQUFXLENBQUNJLE1BQVosQ0FBbUIsQ0FDakJYLElBQUksQ0FBRVEsaUJBRFcsQ0FFakJJLFFBQVEsQ0FBRSxRQUZPLENBQW5CLEVBSUQsQ0FqQnFCLENBa0J0QixDQUFDaEMsR0FBRCxDQWxCc0IsQ0FBeEIsQ0FxQkEsS0FBTWlDLFlBQVcsQ0FBRzlCLEtBQUssQ0FBQ3VCLFdBQU4sQ0FBa0IsSUFBTUQsZUFBZSxDQUFDcEIsV0FBRCxDQUF2QyxDQUFzRCxDQUN4RW9CLGVBRHdFLENBRXhFcEIsV0FGd0UsQ0FBdEQsQ0FBcEIsQ0FLQSxLQUFNNkIsV0FBVSxDQUFHL0IsS0FBSyxDQUFDdUIsV0FBTixDQUFrQixJQUFNRCxlQUFlLENBQUN4QixXQUFELENBQXZDLENBQXNELENBQ3ZFd0IsZUFEdUUsQ0FFdkV4QixXQUZ1RSxDQUF0RCxDQUFuQixDQUtBLE1BQU8sQ0FDTGtDLGNBQWMsQ0FBRWxDLFdBQVcsR0FBSyxJQUQzQixDQUVMbUMsZUFBZSxDQUFFL0IsV0FBVyxHQUFLLElBRjVCLENBR0w0QixXQUhLLENBSUxDLFVBSkssQ0FBUCxDQU1ELENBRUQsS0FBTUcsa0JBQWlCLENBQUcsb0VBQU0sQ0FBQ3BELFFBQVAsaUVBQUgsMmdTQUF2QixDQUlDLEtBQU1xRCxhQUFZLHFwU0FBbEIsQ0FNQSxLQUFNQyxlQUFjLGt4U0FBcEIsQ0FlQSxLQUFNQyxtQkFBa0IsQ0FBRyxvRUFBTSxDQUFDRCxjQUFQLGtFQUFILDRDQUlyQkYsaUJBSnFCLHVEQVFULENBQUMsQ0FBQ0YsY0FBRCxDQUFELEdBQXVCQSxjQUFjLENBQUksS0FBSixDQUFZLFFBUnhDLDA3UkFBeEIsQ0FXQSxLQUFNTSxvQkFBbUIsQ0FBRyxvRUFBTSxDQUFDRixjQUFQLG1FQUFILDRDQUl0QkYsaUJBSnNCLHVEQVFWLENBQUMsQ0FBQ0QsZUFBRCxDQUFELEdBQXdCQSxlQUFlLENBQUksS0FBSixDQUFZLFFBUnpDLDA3UkFBekIsQ0FXQSxLQUFNTSx1QkFBc0IsQ0FBRyxvRUFBTSxDQUFDeEQsSUFBUCxzRUFBSCxxSkFhekJvRCxZQWJ5QixzOVJBQTVCLENBa0JELEtBQU1LLFVBQVMsQ0FBRyxDQUFDLENBQUNyRCxJQUFJLENBQUpBLEtBQUksQ0FBRyxFQUFSLENBQVlzRCxLQUFLLENBQUxBLE1BQUssQ0FBRyxTQUFwQixDQUFELEdBQ2hCLDhFQUNFLEtBQUssQ0FBQyw0QkFEUixDQUVFLEtBQUssQ0FBRXRELEtBRlQsQ0FHRSxNQUFNLENBQUVBLEtBSFYsQ0FJRSxPQUFPLENBQUMsV0FKVixDQUtFLElBQUksQ0FBQyxNQUxQLENBTUUsTUFBTSxDQUFFc0QsTUFOVixDQU9FLFdBQVcsQ0FBQyxHQVBkLENBUUUsYUFBYSxDQUFDLE9BUmhCLENBU0UsY0FBYyxDQUFDLE9BVGpCLFVBV0UsK0VBQU0sQ0FBQyxDQUFDLHdCQUFSLEVBWEYsRUFERixDQWlCQSxLQUFNQyxXQUFVLENBQUcsQ0FBQyxDQUFDdkQsSUFBSSxDQUFKQSxNQUFJLENBQUcsRUFBUixDQUFZc0QsS0FBSyxDQUFMQSxPQUFLLENBQUcsU0FBcEIsQ0FBRCxHQUNqQiw4RUFDRSxLQUFLLENBQUMsNEJBRFIsQ0FFRSxLQUFLLENBQUV0RCxNQUZULENBR0UsTUFBTSxDQUFFQSxNQUhWLENBSUUsT0FBTyxDQUFDLFdBSlYsQ0FLRSxJQUFJLENBQUMsTUFMUCxDQU1FLE1BQU0sQ0FBRXNELE9BTlYsQ0FPRSxXQUFXLENBQUMsR0FQZCxDQVFFLGFBQWEsQ0FBQyxPQVJoQixDQVNFLGNBQWMsQ0FBQyxPQVRqQixVQVdFLCtFQUFNLENBQUMsQ0FBQyx1QkFBUixFQVhGLEVBREYsQ0FpQk8sUUFBU0UsU0FBVCxDQUFrQixDQUFDOUIsUUFBRCxDQUFsQixDQUE4QixDQUNuQyxLQUFNaEIsSUFBRyxDQUFHRyxLQUFLLENBQUM0QyxNQUFOLEVBQVosQ0FFQSxLQUFNLENBQ0paLGNBREksQ0FFSkMsZUFGSSxDQUdKSCxXQUhJLENBSUpDLFVBSkksRUFLRm5DLFdBQVcsQ0FBQ0MsR0FBRCxDQUxmLENBT0EsTUFDRSx5RUFBQyxpQkFBRCxFQUFtQixJQUFJLENBQUMsUUFBeEIsQ0FBaUMsYUFBVyxpQkFBNUMsV0FDRSx1RUFBQyxzQkFBRCxFQUF3QixHQUFHLENBQUVBLEdBQTdCLFVBQ0dHLEtBQUssQ0FBQzZDLFFBQU4sQ0FBZUMsR0FBZixDQUFtQmpDLFFBQW5CLENBQTZCLENBQUNFLEtBQUQsQ0FBUWdDLEtBQVIsR0FDNUIsdUVBQUMsWUFBRCxXQUEyQmhDLEtBQTNCLEVBQW1CZ0MsS0FBbkIsQ0FERCxDQURILEVBREYsQ0FNRSx1RUFBQyxrQkFBRCxFQUFvQixjQUFjLENBQUVmLGNBQXBDLENBQW9ELE9BQU8sQ0FBRUQsVUFBN0QsQ0FBeUUsYUFBVyxnQkFBcEYsVUFDRSx1RUFBQyxTQUFELElBREYsRUFORixDQVNFLHVFQUFDLG1CQUFELEVBQ0UsZUFBZSxDQUFFRSxlQURuQixDQUVFLE9BQU8sQ0FBRUgsV0FGWCxDQUdFLGFBQVcsWUFIYixVQUtFLHVFQUFDLFVBQUQsSUFMRixFQVRGLEdBREYsQ0FtQkQsQ0FFTSxLQUFNa0IsT0FBTSxDQUFHLENBQ3BCLFNBRG9CLENBRXBCLFNBRm9CLENBR3BCLFNBSG9CLENBSXBCLFNBSm9CLENBS3BCLFNBTG9CLENBTXBCLFNBTm9CLENBT3BCLFNBUG9CLENBUXBCLFNBUm9CLENBQWYiLCJmaWxlIjoiLi9wYWNrYWdlcy9jbGF1enppYS10aGVtZS9zcmMvY29tcG9uZW50cy9DYXJvdXNlbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c3R5bGVkLCBjc3N9IGZyb20gJ2Zyb250aXR5J1xyXG5cclxuZXhwb3J0IGNvbnN0IEgxID0gc3R5bGVkLmgxYFxyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZy1ib3R0b206IDEwcmVtO1xyXG5gXHJcblxyXG5jb25zdCBSZWxhdGl2ZSA9IHN0eWxlZC5kaXZgXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5gXHJcblxyXG5jb25zdCBGbGV4ID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG5gXHJcblxyXG5leHBvcnQgY29uc3QgSG9yaXpvbnRhbENlbnRlciA9IHN0eWxlZChGbGV4KWBcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcblxyXG4gIG1heC13aWR0aDogMjVyZW07XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGhlaWdodDogc3RyZXRjaDtcclxuICB3aWR0aDogMTAwJTtcclxuXHJcbiAgYmFja2dyb3VuZDogI2VjZjBmMTtcclxuYFxyXG5cclxuY29uc3QgSXRlbSA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGZvbnQtc2l6ZTogMnJlbTtcclxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcclxuXHJcbiAgd2lkdGg6ICR7KHtzaXplfSkgPT4gYCR7c2l6ZX1yZW1gfTtcclxuICBoZWlnaHQ6ICR7KHtzaXplfSkgPT4gYCR7c2l6ZX1yZW1gfTtcclxuXHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuYFxyXG5cclxuZnVuY3Rpb24gZ2V0UHJldkVsZW1lbnQobGlzdCkge1xyXG4gIGNvbnN0IHNpYmxpbmcgPSBsaXN0WzBdLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcclxuICBcclxuICBpZiAoc2libGluZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gc2libGluZ1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNpYmxpbmdcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TmV4dEVsZW1lbnQobGlzdCkge1xyXG4gIGNvbnN0IHNpYmxpbmcgPSBsaXN0W2xpc3QubGVuZ3RoIC0gMV0ubmV4dEVsZW1lbnRTaWJsaW5nXHJcblxyXG4gIGlmIChzaWJsaW5nIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiBzaWJsaW5nXHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbFxyXG59XHJcblxyXG5mdW5jdGlvbiB1c2VQb3NpdGlvbihyZWYpIHtcclxuICBjb25zdCBbcHJldkVsZW1lbnQsIHNldFByZXZFbGVtZW50XSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXHJcbiAgY29uc3QgW25leHRFbGVtZW50LCBzZXROZXh0RWxlbWVudF0gPSBSZWFjdC51c2VTdGF0ZShudWxsKVxyXG5cclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50XHJcblxyXG4gICAgY29uc3QgdXBkYXRlID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgIFxyXG4gICAgICBjb25zdCB2aXNpYmxlRWxlbWVudHMgPSBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcigoY2hpbGQpID0+IHtcclxuICAgICAgICBjb25zdCBjaGlsZFJlY3QgPSBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICByZXR1cm4gY2hpbGRSZWN0LmxlZnQgPj0gcmVjdC5sZWZ0ICYmIGNoaWxkUmVjdC5yaWdodCA8PSByZWN0LnJpZ2h0XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBpZiAodmlzaWJsZUVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBzZXRQcmV2RWxlbWVudChnZXRQcmV2RWxlbWVudCh2aXNpYmxlRWxlbWVudHMpKVxyXG4gICAgICAgIHNldE5leHRFbGVtZW50KGdldE5leHRFbGVtZW50KHZpc2libGVFbGVtZW50cykpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoKVxyXG5cclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdXBkYXRlLCB7cGFzc2l2ZTogdHJ1ZX0pXHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGUsIHtwYXNzaXZlOiB0cnVlfSlcclxuICAgIH1cclxuICB9LCBbcmVmXSlcclxuXHJcbiAgY29uc3Qgc2Nyb2xsVG9FbGVtZW50ID0gUmVhY3QudXNlQ2FsbGJhY2soXHJcbiAgICAoZWxlbWVudCkgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHJlZi5jdXJyZW50XHJcblxyXG4gICAgICBpZiAoIWN1cnJlbnROb2RlIHx8ICFlbGVtZW50KSByZXR1cm5cclxuXHJcbiAgICAgIGxldCBuZXdTY3JvbGxQb3NpdGlvblxyXG5cclxuICAgICAgbmV3U2Nyb2xsUG9zaXRpb24gPVxyXG4gICAgICAgIGVsZW1lbnQub2Zmc2V0TGVmdCArXHJcbiAgICAgICAgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDIgLVxyXG4gICAgICAgIGN1cnJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC8gMlxyXG5cclxuICAgICAgY3VycmVudE5vZGUuc2Nyb2xsKHtcclxuICAgICAgICBsZWZ0OiBuZXdTY3JvbGxQb3NpdGlvbixcclxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgW3JlZl0sXHJcbiAgKVxyXG5cclxuICBjb25zdCBzY3JvbGxSaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHNjcm9sbFRvRWxlbWVudChuZXh0RWxlbWVudCksIFtcclxuICAgIHNjcm9sbFRvRWxlbWVudCxcclxuICAgIG5leHRFbGVtZW50LFxyXG4gIF0pXHJcblxyXG4gIGNvbnN0IHNjcm9sbExlZnQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBzY3JvbGxUb0VsZW1lbnQocHJldkVsZW1lbnQpLCBbXHJcbiAgICBzY3JvbGxUb0VsZW1lbnQsXHJcbiAgICBwcmV2RWxlbWVudCxcclxuICBdKVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgaGFzSXRlbXNPbkxlZnQ6IHByZXZFbGVtZW50ICE9PSBudWxsLFxyXG4gICAgaGFzSXRlbXNPblJpZ2h0OiBuZXh0RWxlbWVudCAhPT0gbnVsbCxcclxuICAgIHNjcm9sbFJpZ2h0LFxyXG4gICAgc2Nyb2xsTGVmdCxcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IENhcm91c2VyQ29udGFpbmVyID0gc3R5bGVkKFJlbGF0aXZlKWBcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG5gXHJcblxyXG4gY29uc3QgQ2Fyb3VzZWxJdGVtID0gc3R5bGVkLmRpdmBcclxuICBmbGV4OiAwIDAgYXV0bztcclxuXHJcbiAgbWFyZ2luLWxlZnQ6IDFyZW07XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG5cclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gIHRvcDogNTAlO1xyXG4gIHotaW5kZXg6IDE7XHJcblxyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O1xyXG5cclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBwYWRkaW5nOiAwLjVyZW07XHJcbmBcclxuIGNvbnN0IExlZnRDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZChDYXJvdXNlbEJ1dHRvbilgXHJcbiAgbGVmdDogMDtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAwJSwgLTUwJSk7XHJcblxyXG4gICR7Q2Fyb3VzZXJDb250YWluZXJ9OmhvdmVyICYge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01MCUpO1xyXG4gIH1cclxuXHJcbiAgdmlzaWJpbGl0eTogJHsoe2hhc0l0ZW1zT25MZWZ0fSkgPT4gKGhhc0l0ZW1zT25MZWZ0ID8gYGFsbGAgOiBgaGlkZGVuYCl9O1xyXG5gXHJcblxyXG4gY29uc3QgUmlnaHRDYXJvdXNlbEJ1dHRvbiA9IHN0eWxlZChDYXJvdXNlbEJ1dHRvbilgXHJcbiAgcmlnaHQ6IDA7XHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwJSwgLTUwJSk7XHJcblxyXG4gICR7Q2Fyb3VzZXJDb250YWluZXJ9OmhvdmVyICYge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01MCUpO1xyXG4gIH1cclxuXHJcbiAgdmlzaWJpbGl0eTogJHsoe2hhc0l0ZW1zT25SaWdodH0pID0+IChoYXNJdGVtc09uUmlnaHQgPyBgYWxsYCA6IGBoaWRkZW5gKX07XHJcbmBcclxuXHJcbiBjb25zdCBDYXJvdXNlckNvbnRhaW5lcklubmVyID0gc3R5bGVkKEZsZXgpYFxyXG4gIG92ZXJmbG93LXg6IHNjcm9sbDtcclxuICBzY3JvbGwtc25hcC10eXBlOiB4IG1hbmRhdG9yeTtcclxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XHJcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xyXG5cclxuICAvLyBvZmZzZXQgZm9yIGNoaWxkcmVuIHNwYWNpbmdcclxuICBtYXJnaW4tbGVmdDogLTFyZW07XHJcblxyXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG5cclxuICAke0Nhcm91c2VsSXRlbX0gJiB7XHJcbiAgICBzY3JvbGwtc25hcC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuYFxyXG5cclxuY29uc3QgQXJyb3dMZWZ0ID0gKHtzaXplID0gMzAsIGNvbG9yID0gJyMwMDAwMDAnfSkgPT4gKFxyXG4gIDxzdmdcclxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgd2lkdGg9e3NpemV9XHJcbiAgICBoZWlnaHQ9e3NpemV9XHJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgIGZpbGw9XCJub25lXCJcclxuICAgIHN0cm9rZT17Y29sb3J9XHJcbiAgICBzdHJva2VXaWR0aD1cIjJcIlxyXG4gICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcclxuICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNMTkgMTJINk0xMiA1bC03IDcgNyA3XCIgLz5cclxuICA8L3N2Zz5cclxuKVxyXG5cclxuXHJcbmNvbnN0IEFycm93UmlnaHQgPSAoe3NpemUgPSAzMCwgY29sb3IgPSAnIzAwMDAwMCd9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICB3aWR0aD17c2l6ZX1cclxuICAgIGhlaWdodD17c2l6ZX1cclxuICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgZmlsbD1cIm5vbmVcIlxyXG4gICAgc3Ryb2tlPXtjb2xvcn1cclxuICAgIHN0cm9rZVdpZHRoPVwiMlwiXHJcbiAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxyXG4gICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXHJcbiAgPlxyXG4gICAgPHBhdGggZD1cIk01IDEyaDEzTTEyIDVsNyA3LTcgN1wiIC8+XHJcbiAgPC9zdmc+XHJcbilcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ2Fyb3VzZWwoe2NoaWxkcmVufSkge1xyXG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZigpXHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGhhc0l0ZW1zT25MZWZ0LFxyXG4gICAgaGFzSXRlbXNPblJpZ2h0LFxyXG4gICAgc2Nyb2xsUmlnaHQsXHJcbiAgICBzY3JvbGxMZWZ0LFxyXG4gIH0gPSB1c2VQb3NpdGlvbihyZWYpXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q2Fyb3VzZXJDb250YWluZXIgcm9sZT1cInJlZ2lvblwiIGFyaWEtbGFiZWw9XCJDb2xvcnMgY2Fyb3VzZWxcIj5cclxuICAgICAgPENhcm91c2VyQ29udGFpbmVySW5uZXIgcmVmPXtyZWZ9PlxyXG4gICAgICAgIHtSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IChcclxuICAgICAgICAgIDxDYXJvdXNlbEl0ZW0ga2V5PXtpbmRleH0+e2NoaWxkfTwvQ2Fyb3VzZWxJdGVtPlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L0Nhcm91c2VyQ29udGFpbmVySW5uZXI+XHJcbiAgICAgIDxMZWZ0Q2Fyb3VzZWxCdXR0b24gaGFzSXRlbXNPbkxlZnQ9e2hhc0l0ZW1zT25MZWZ0fSBvbkNsaWNrPXtzY3JvbGxMZWZ0fSBhcmlhLWxhYmVsPSdQcmV2aW91cyBzbGlkZSc+XHJcbiAgICAgICAgPEFycm93TGVmdCAvPlxyXG4gICAgICA8L0xlZnRDYXJvdXNlbEJ1dHRvbj5cclxuICAgICAgPFJpZ2h0Q2Fyb3VzZWxCdXR0b25cclxuICAgICAgICBoYXNJdGVtc09uUmlnaHQ9e2hhc0l0ZW1zT25SaWdodH1cclxuICAgICAgICBvbkNsaWNrPXtzY3JvbGxSaWdodH1cclxuICAgICAgICBhcmlhLWxhYmVsPSdOZXh0IHNsaWRlJ1xyXG4gICAgICA+XHJcbiAgICAgICAgPEFycm93UmlnaHQgLz5cclxuICAgICAgPC9SaWdodENhcm91c2VsQnV0dG9uPlxyXG4gICAgPC9DYXJvdXNlckNvbnRhaW5lcj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjb2xvcnMgPSBbXHJcbiAgJyNmMWM0MGYnLFxyXG4gICcjZjM5YzEyJyxcclxuICAnI2U3NGMzYycsXHJcbiAgJyMxNmEwODUnLFxyXG4gICcjMjk4MGI5JyxcclxuICAnIzhlNDRhZCcsXHJcbiAgJyMyYzNlNTAnLFxyXG4gICcjOTVhNWE2JyxcclxuXVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/clauzzia-theme/src/components/Carousel.js\n");

/***/ }),

/***/ "./packages/clauzzia-theme/src/components/Fotos.js":
/*!*********************************************************!*\
  !*** ./packages/clauzzia-theme/src/components/Fotos.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _Carousel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Carousel */ \"./packages/clauzzia-theme/src/components/Carousel.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nconst numbersArray=Array.from(Array(10).keys()).map(number=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(Item,{size:5,style:{color:'black'},children:number},number));const colorsArray=_Carousel__WEBPACK_IMPORTED_MODULE_4__[\"colors\"].map(color=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(Item,{size:20,style:{background:color,borderRadius:'20px',opacity:0.9},children:color},color));const Fotos=({state})=>{const fotos=Object.values(state.source.fotografia);console.log(fotos);return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(_Carousel__WEBPACK_IMPORTED_MODULE_4__[\"H1\"],{children:\"Fotograf\\xEDa\"}),fotos.map(foto=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(\"p\",{dangerouslySetInnerHTML:{__html:foto.title.rendered}},foto.id);})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"connect\"])(Fotos));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jbGF1enppYS10aGVtZS9zcmMvY29tcG9uZW50cy9Gb3Rvcy5qcz8yZTQzIl0sIm5hbWVzIjpbIm51bWJlcnNBcnJheSIsIkFycmF5IiwiZnJvbSIsImtleXMiLCJtYXAiLCJudW1iZXIiLCJjb2xvciIsImNvbG9yc0FycmF5IiwiY29sb3JzIiwiYmFja2dyb3VuZCIsImJvcmRlclJhZGl1cyIsIm9wYWNpdHkiLCJGb3RvcyIsInN0YXRlIiwiZm90b3MiLCJPYmplY3QiLCJ2YWx1ZXMiLCJzb3VyY2UiLCJmb3RvZ3JhZmlhIiwiY29uc29sZSIsImxvZyIsImZvdG8iLCJfX2h0bWwiLCJ0aXRsZSIsInJlbmRlcmVkIiwiaWQiLCJjb25uZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUtFLEtBQU1BLGFBQVksQ0FBR0MsS0FBSyxDQUFDQyxJQUFOLENBQVdELEtBQUssQ0FBQyxFQUFELENBQUwsQ0FBVUUsSUFBVixFQUFYLEVBQTZCQyxHQUE3QixDQUFrQ0MsTUFBRCxFQUNwRCx1RUFBQyxJQUFELEVBQU0sSUFBSSxDQUFFLENBQVosQ0FBZSxLQUFLLENBQUUsQ0FBQ0MsS0FBSyxDQUFFLE9BQVIsQ0FBdEIsVUFDR0QsTUFESCxFQUE2Q0EsTUFBN0MsQ0FEbUIsQ0FBckIsQ0FNQSxLQUFNRSxZQUFXLENBQUdDLGdEQUFNLENBQUNKLEdBQVAsQ0FBWUUsS0FBRCxFQUM3Qix1RUFBQyxJQUFELEVBQ0UsSUFBSSxDQUFFLEVBRFIsQ0FFRSxLQUFLLENBQUUsQ0FBQ0csVUFBVSxDQUFFSCxLQUFiLENBQW9CSSxZQUFZLENBQUUsTUFBbEMsQ0FBMENDLE9BQU8sQ0FBRSxHQUFuRCxDQUZULFVBS0dMLEtBTEgsRUFHT0EsS0FIUCxDQURrQixDQUFwQixDQVNGLEtBQU1NLE1BQUssQ0FBRyxDQUFDLENBQUNDLEtBQUQsQ0FBRCxHQUFXLENBRXJCLEtBQU1DLE1BQUssQ0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWNILEtBQUssQ0FBQ0ksTUFBTixDQUFhQyxVQUEzQixDQUFkLENBQ0FDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTixLQUFaLEVBQ0EsTUFDSSx3SkFFSSx1RUFBQyw0Q0FBRCw0QkFGSixDQUdJQSxLQUFLLENBQUNWLEdBQU4sQ0FBV2lCLElBQUQsRUFBUyxDQUNoQixNQUNJLDZFQUFpQix1QkFBdUIsQ0FBRSxDQUFDQyxNQUFNLENBQUNELElBQUksQ0FBQ0UsS0FBTCxDQUFXQyxRQUFuQixDQUExQyxFQUFRSCxJQUFJLENBQUNJLEVBQWIsQ0FESixDQUdILENBSkEsQ0FISixHQURKLENBV0gsQ0FmRCxDQWdCZ0JDLHVIQUFPLENBQUNkLEtBQUQsQ0FBdEIiLCJmaWxlIjoiLi9wYWNrYWdlcy9jbGF1enppYS10aGVtZS9zcmMvY29tcG9uZW50cy9Gb3Rvcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge3VzZUVmZmVjdH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7Y29ubmVjdCwgc3R5bGVkLCBjc3N9IGZyb20gJ2Zyb250aXR5J1xyXG5pbXBvcnQge0NvbnRhaW5lciwgSDEsIEhvcml6b250YWxDZW50ZXIsIENhcm91c2VsLCBjb2xvcnN9IGZyb20gJy4vQ2Fyb3VzZWwnXHJcblxyXG4gIFxyXG4gIGNvbnN0IG51bWJlcnNBcnJheSA9IEFycmF5LmZyb20oQXJyYXkoMTApLmtleXMoKSkubWFwKChudW1iZXIpID0+IChcclxuICAgIDxJdGVtIHNpemU9ezV9IHN0eWxlPXt7Y29sb3I6ICdibGFjayd9fSBrZXk9e251bWJlcn0+XHJcbiAgICAgIHtudW1iZXJ9XHJcbiAgICA8L0l0ZW0+XHJcbiAgKSlcclxuICBcclxuICBjb25zdCBjb2xvcnNBcnJheSA9IGNvbG9ycy5tYXAoKGNvbG9yKSA9PiAoXHJcbiAgICA8SXRlbVxyXG4gICAgICBzaXplPXsyMH1cclxuICAgICAgc3R5bGU9e3tiYWNrZ3JvdW5kOiBjb2xvciwgYm9yZGVyUmFkaXVzOiAnMjBweCcsIG9wYWNpdHk6IDAuOX19XHJcbiAgICAgIGtleT17Y29sb3J9XHJcbiAgICA+XHJcbiAgICAgIHtjb2xvcn1cclxuICAgIDwvSXRlbT5cclxuICApKVxyXG5jb25zdCBGb3RvcyA9ICh7c3RhdGV9KT0+e1xyXG4gICAgXHJcbiAgICBjb25zdCBmb3RvcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuc291cmNlLmZvdG9ncmFmaWEpXHJcbiAgICBjb25zb2xlLmxvZyhmb3Rvcyk7XHJcbiAgICByZXR1cm4oXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDxIMT5Gb3RvZ3JhZsOtYTwvSDE+XHJcbiAgICAgICAgICAge2ZvdG9zLm1hcCgoZm90bykgPT57XHJcbiAgICAgICAgICAgICAgIHJldHVybihcclxuICAgICAgICAgICAgICAgICAgIDxwIGtleT17Zm90by5pZH0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6Zm90by50aXRsZS5yZW5kZXJlZH19PjwvcD5cclxuICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgIH0pfVxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbiBleHBvcnQgZGVmYXVsdCBjb25uZWN0KEZvdG9zKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/clauzzia-theme/src/components/Fotos.js\n");

/***/ })

})